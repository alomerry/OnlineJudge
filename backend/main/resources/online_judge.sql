-- --------------------------------------------------------
-- 主机:                           rm-bp14419zgc8077s9hjo.mysql.rds.aliyuncs.com
-- 服务器版本:                        5.7.18-log - Source distribution
-- 服务器操作系统:                      Linux
-- HeidiSQL 版本:                  10.1.0.5587
-- --------------------------------------------------------

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET NAMES utf8 */;
/*!50503 SET NAMES utf8mb4 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;


-- 导出 online_judge 的数据库结构
CREATE DATABASE IF NOT EXISTS `online_judge` /*!40100 DEFAULT CHARACTER SET utf8 COLLATE utf8_bin */;
USE `online_judge`;

-- 导出  表 online_judge.compile_info 结构
CREATE TABLE IF NOT EXISTS `compile_info` (
  `solution_id` varchar(16) COLLATE utf8_bin NOT NULL COMMENT '提交id，即RunID',
  `error` text COLLATE utf8_bin COMMENT '编译错误原因'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='记录编译错误的提交号（id）及原因';

-- 正在导出表  online_judge.compile_info 的数据：~3 rows (大约)
/*!40000 ALTER TABLE `compile_info` DISABLE KEYS */;
INSERT INTO `compile_info` (`solution_id`, `error`) VALUES
	('396e790700af', '/oj-home/judge/396e790700af/code/main.cpp:1:19: fatal error: iosteam: No such file or directory\ncompilation terminated.\n'),
	('16c9d1d9a414', '/oj-home/judge/16c9d1d9a414/code/main.cpp:1:19: fatal error: iosteam: No such file or directory\ncompilation terminated.\n'),
	('2bf63213d08b', '/oj-home/judge/2bf63213d08b/code/main.cpp:1:2: error: invalid preprocessing directive #DSFADAFDAFSD\n #DSFADAFDAFSD\n  ^\n');
/*!40000 ALTER TABLE `compile_info` ENABLE KEYS */;

-- 导出  表 online_judge.contest 结构
CREATE TABLE IF NOT EXISTS `contest` (
  `contest_id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT '竞赛id',
  `title` varchar(1024) COLLATE utf8_bin NOT NULL COMMENT '竞赛标题',
  `access` bit(1) NOT NULL DEFAULT b'0' COMMENT '是否可报名',
  `user_id` int(11) unsigned NOT NULL COMMENT '创建者Id',
  `start_at` datetime NOT NULL COMMENT '开始时间(年月日时分)',
  `end_at` datetime NOT NULL COMMENT '结束时间(年月日时分)',
  `describes` varchar(4096) COLLATE utf8_bin NOT NULL COMMENT '竞赛描述',
  `privates` tinyint(4) DEFAULT '0' COMMENT '内部/公开（0/1）',
  `organizer` varchar(50) COLLATE utf8_bin DEFAULT NULL COMMENT '主办方',
  `max` int(10) unsigned NOT NULL COMMENT '比赛人数上限',
  `now` int(10) unsigned DEFAULT '0' COMMENT '当前参加人数',
  `info` varchar(4096) COLLATE utf8_bin DEFAULT NULL COMMENT '竞赛tip',
  PRIMARY KEY (`contest_id`),
  KEY `FK_contest_users` (`user_id`),
  CONSTRAINT `FK_contest_users` FOREIGN KEY (`user_id`) REFERENCES `users` (`user_id`)
) ENGINE=InnoDB AUTO_INCREMENT=21 DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='竞赛表';

-- 正在导出表  online_judge.contest 的数据：~2 rows (大约)
/*!40000 ALTER TABLE `contest` DISABLE KEYS */;
INSERT INTO `contest` (`contest_id`, `title`, `access`, `user_id`, `start_at`, `end_at`, `describes`, `privates`, `organizer`, `max`, `now`, `info`) VALUES
	(18, '蓝桥杯', b'0', 12, '2019-06-08 00:00:00', '2019-06-29 00:00:00', '<p>为促进软件和信息领域专业技术人才培养，提升高校毕业生的就业竞争力，由教育部就业指导中心支持，工业和信息化部人才交流中心举办蓝桥杯大赛。九年来，包括北大、清华在内的超过 1200 余所院校，累计20万余名学子报名参赛，IBM、百度等知名企业全程参与，成为国内始终领跑的人才培养选拔模式并获得行业深度认可的IT类科技竞赛。</p>', 1, '教育部高等学校计算机科学与技术教学指导委员会', 100, 1, '可查阅资料，可询问他人，但禁止抄袭'),
	(19, 'ACM - ICPC', b'1', 12, '2019-05-25 00:00:00', '2019-05-31 00:00:00', '<p>以团队的形式代表各学校参赛，每队由至多3名队员组成。每位队员必须是在校学生，有一定的年龄限制，并且每年最多可以参加2站区域选拔赛。</p>', 1, '国际计算机协会', 300, 0, NULL),
	(20, 'PAT - 甲级', b'1', 12, '2019-05-24 00:00:00', '2019-05-31 00:00:00', '<p>浙江大学计算机程序设计能力考试（Programming Ability Test，简称PAT）是由浙江大学计算机科学与技术学院组织的统一考试。旨在培养和展现学生分析问题、解决问题和计算机程序设计的能力，科学评价计算机程序设计人才，并为企业选拔人才提供参考标准。</p>', 1, '浙江大学计算机科学与技术学院', 30, 0, NULL);
/*!40000 ALTER TABLE `contest` ENABLE KEYS */;

-- 导出  表 online_judge.contest_apply 结构
CREATE TABLE IF NOT EXISTS `contest_apply` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `contest_id` int(11) unsigned NOT NULL COMMENT '竞赛id',
  `user_id` int(11) unsigned NOT NULL COMMENT '用户id',
  `status` tinyint(4) NOT NULL DEFAULT '0' COMMENT '是否加入(0等待确认/1已加入/2被拒绝)',
  `apply_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '申请时间',
  PRIMARY KEY (`id`),
  KEY `FK_contest_applyqueue_contest` (`contest_id`),
  KEY `FK_contest_applyqueue_users` (`user_id`),
  CONSTRAINT `FK_contest_applyqueue_contest` FOREIGN KEY (`contest_id`) REFERENCES `contest` (`contest_id`),
  CONSTRAINT `FK_contest_applyqueue_users` FOREIGN KEY (`user_id`) REFERENCES `users` (`user_id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='比赛申请表';

-- 正在导出表  online_judge.contest_apply 的数据：~0 rows (大约)
/*!40000 ALTER TABLE `contest_apply` DISABLE KEYS */;
INSERT INTO `contest_apply` (`id`, `contest_id`, `user_id`, `status`, `apply_time`) VALUES
	(1, 18, 10, 1, '2019-06-14 12:44:33');
/*!40000 ALTER TABLE `contest_apply` ENABLE KEYS */;

-- 导出  表 online_judge.contest_problem 结构
CREATE TABLE IF NOT EXISTS `contest_problem` (
  `problem_id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT '题目id',
  `contest_id` int(11) unsigned DEFAULT NULL COMMENT '竞赛id',
  `title` varchar(200) COLLATE utf8_bin DEFAULT NULL COMMENT '标题',
  `num` int(11) DEFAULT NULL COMMENT '竞赛题目编号',
  KEY `FK_contest_problem_problems` (`problem_id`),
  KEY `FK_contest_problem_contest` (`contest_id`),
  CONSTRAINT `FK_contest_problem_contest` FOREIGN KEY (`contest_id`) REFERENCES `contest` (`contest_id`),
  CONSTRAINT `FK_contest_problem_problems` FOREIGN KEY (`problem_id`) REFERENCES `problems` (`problem_id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=39 DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='竞赛题目';

-- 正在导出表  online_judge.contest_problem 的数据：~0 rows (大约)
/*!40000 ALTER TABLE `contest_problem` DISABLE KEYS */;
INSERT INTO `contest_problem` (`problem_id`, `contest_id`, `title`, `num`) VALUES
	(38, 18, NULL, NULL),
	(11, 18, NULL, NULL);
/*!40000 ALTER TABLE `contest_problem` ENABLE KEYS */;

-- 导出  表 online_judge.news 结构
CREATE TABLE IF NOT EXISTS `news` (
  `news_id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT '新闻id',
  `user_id` int(11) unsigned NOT NULL COMMENT '用户id',
  `title` varchar(200) COLLATE utf8_bin NOT NULL COMMENT '标题',
  `content` text COLLATE utf8_bin NOT NULL COMMENT '内容',
  `update_time` datetime NOT NULL COMMENT '更新时间',
  `defunct` varchar(2) COLLATE utf8_bin NOT NULL COMMENT '公开状态(0:不公开 1:公开)',
  `contest_id` int(11) DEFAULT NULL COMMENT '所属竞赛',
  `create_at` datetime NOT NULL COMMENT '创建时间',
  PRIMARY KEY (`news_id`)
) ENGINE=InnoDB AUTO_INCREMENT=20 DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='公告';

-- 正在导出表  online_judge.news 的数据：~11 rows (大约)
/*!40000 ALTER TABLE `news` DISABLE KEYS */;
INSERT INTO `news` (`news_id`, `user_id`, `title`, `content`, `update_time`, `defunct`, `contest_id`, `create_at`) VALUES
	(1, 12, 'Mo Online Judge 已初步完成', '<p>Mo Online Judge 已初步完成<br></p>', '2019-05-01 03:14:18', '1', NULL, '2019-04-26 11:11:58'),
	(2, 12, 'V1.0 版本更新', '<p>V1.0 版本更新本版尚有漏洞,如遇Bug请联系XXXX</p>', '2019-04-26 11:31:55', '1', NULL, '2019-04-26 11:31:55'),
	(5, 10, '临近期中考试,请大家积极准备', '<p>临近期中考试,请大家积极准备。</p>', '2019-06-08 10:07:07', '1', NULL, '2019-04-26 12:54:19'),
	(6, 12, '考试时间地点已公布', '<p>考试时间地点已公布,大家可以去<u><i><a href="http://www.xxxx.com" rel="nofollow">www.xxxx.com</a></i></u>查询<br></p>', '2019-04-26 12:55:16', '1', 20, '2019-04-26 12:55:16'),
	(10, 12, '报名条件', '<p>以校级为单位，限制两个队伍</p>', '2019-05-04 14:09:04', '1', 19, '2019-05-04 14:09:04'),
	(12, 12, '关于举办第三届蓝桥杯大赛德国国际赛的通知', '<p>各参赛院校：</p><p>由工业和信息化部人才交流中心举办，教育部全国高等学校学生信息咨询与就业指导中心为支持单位的蓝桥杯大赛，至今已成功举办九届。全国累计共有1400余所高校的近25万名学生参加，得到了各大院校的鼎力支持与高校学子的踊跃参与。首届与第二届蓝桥杯大赛国际赛已于美国成功举办。清华大学、北京大学、河海大学、麻省理工学院、罗格斯大学、波士顿大学等众多院校参加了赛事，呈现了较高的水平。</p><p>根据国务院《统筹推进世界一流大学和一流学科建设总体方案》，要求与世界高水平大学和学术机构有深度学术交流和科研合作。为创新体制机制与人才培养模式，统筹利用国内国际教育资源，广泛借鉴吸收国际先进教育经验，进一步提升教育对外开放水平，通过改革创新和对外开放解决难题、激发活力、推动发展，蓝桥杯组委会特举办第三届蓝桥杯大赛国际赛。本届比赛将在德国举办，同时美国将设分赛区。蓝桥杯国际赛为国际交流性赛事，组委会拟邀请承办国及其周边国家计算机领域大学生与国内获奖选手同场竞技。</p><p>现将第三届蓝桥杯大赛国际赛具体事宜公布如下：</p><p><strong>一、</strong><strong>比赛时间、地点：</strong></p><ol><li>时间：2019年10月25日-2019年10月31日；</li><li>地点：德国主赛场和美国分赛场。</li></ol><p><strong>二、参赛对象：</strong></p><p>凡具有正式全日制学籍的蓝桥杯历届大赛省赛（软件类）一等奖获奖选手均有资格报名参加第三届蓝桥杯大赛国际赛。</p><p><strong>三、参赛要求：</strong></p><p>比赛不分组别，学生以个人为单位参赛，每所参赛院校须派至少一名带队老师，带队老师要求为各参赛院校院长、系主任、教务处长、专业带头人、实训基地负责人、骨干教师、指导教师等。</p><p><strong>四、参赛收获</strong>：</p><ol><li>国内高校：该赛事将搭建与国际高校间专业交流的平台，通过蓝桥杯国际赛的举办，有效促进国内高校计算机课程教学内容和教学方法的改革。邀请德国著名高校知名教授或教师分享计算机专业建设、课程设置及人才培养等经验，开拓国内高校教学思路，提高学术能力水平，使不同教育文化得到进一步的交流和融合；</li><li>参赛选手：国内参赛选手不仅能够与各国高手过招比拼，磨练编程技能，还可以开阔自身视野，提高实践动手能力。同时，国际赛将向有意向留学的学生提供交流渠道；</li><li>获奖证书：获奖后，参赛选手及其指导教师将颁发蓝桥杯国际赛获奖证书。</li></ol><p><strong>五、比赛形式：</strong></p><p>比赛形式为上机编程比赛，比赛时长5小时。</p><p><strong>六、报名方式：</strong></p><p>各参赛院校须在2019年6月14日前将学生及其带队老师的报名表发到<a href="mailto:baoming@lanqiao.org">lanqiao@lanqiao.org</a>邮箱并完成缴费。若逾期未报名及缴费，视为高校自动放弃参加蓝桥杯国际赛资格，后续将不予安排国际赛报名（报名表见附录二）。</p><p><strong>七、收费标准：</strong></p><ol><li>蓝桥杯国际赛报名费：29800元/人（参赛师生均须缴纳报名费）；</li><li>费用包含：北京-德国往返机票、机场建设费、境外人身保险、在德国期间费用（含比赛、师生交流、院校参观、用餐、交通及住宿费）；</li><li>参赛师生由院校所在地赴北京首都机场集合发生的所有往返费用及其他费用自理。</li></ol><p><strong>八、缴费方式：</strong></p><p>1、报名费缴费方式：本届蓝桥杯国际赛报名只接受公对公转账。</p><p style="margin-left: 10px;">户&nbsp; 名：国信蓝桥教育科技(北京)股份有限公司</p><p style="margin-left: 10px;">账&nbsp; 号：110060836018150038530</p><p style="margin-left: 10px;">开户行：交通银行北京翠微路支行</p><p>2、发票申领：</p><p>本届蓝桥杯国际赛由工业和信息化部人才交流中心主办，大赛组委会秘书处设在工业和信息化部人才交流中心，相关费用由国信蓝桥教育科技(北京)股份有限公司统一收取，并为各参赛院校开具正式发票，发票一经开出，不退不换、不能更改。</p>', '2019-05-04 14:19:05', '1', 18, '2019-05-04 14:19:05'),
	(14, 12, '欢迎使用"蓝桥杯"练习系统', '<p>本系统面向参加"蓝桥杯"全国软件和信息技术专业人才大赛的老师和同学。</p><p>本系统将帮助参赛的同学熟悉比赛试题的形式和解题方式。通过使用本系统，同学可以学习到一些重要的编程方法，提高自己的编程水平，在大赛中取得更好的名次，提升自己的竞争力。</p><p>本系统的特点：</p><ol><li><p>入门引导：设置入门引导试题，帮助同学了解比赛的命题形式和解题方法。</p></li><li><p>试题分组：具有相同难度和特点的试题形成一组，同组的试题具有相关性，帮助同学学习与提高程序设计、算法、数据结构的知识。</p></li><li><p>不断更新的试题：系统不定期更新试题，保证同学的训练量。</p></li><li><p>测试管理：可以将练习系统的题目进行组卷，进行分数统计，方便院校在大赛报名中校内选拔出优秀选手。</p></li><li><p>查看评测数据：VIP用户允许查看评测数据，帮助你更有效的练习和提高。</p></li><li><p>比赛环境：使用和软件大赛相同的测试环境进行测试，有效的模拟大赛的评测。</p></li><li><p>即时评测：提交答案后马上进行评测并给出评测结果，方便同学了解自己程序的不足，对自己的程序进行改进。</p></li></ol>', '2019-05-04 14:21:58', '1', 18, '2019-05-04 14:21:58'),
	(15, 12, '2019年秋季PAT报名已经启动', '<p>2019 年秋季 PAT &amp; PATFEE（顶、甲、乙级）定于 2019 年 9 月 8 日 13:30-16:30 在杭州（包括临安、下沙、滨江、仓前）、宁波、福州、西安、郑州、青岛、嘉兴、南昌、兰州、苏州、上海、长春、徐州、贵阳、北京、怀化、呼和浩特、武汉、重庆、成都、吉首、台州、合肥、太原、南京、日照、呼伦贝尔、保定、秦皇岛、淄博、天津、深圳、威海、哈尔滨、石家庄、沈阳、绵阳、绍兴、厦门、温州、滨州、湖州、泉州、三亚等城市同时举办。</p><p>报名已经开启，截止时间为 2019 年 8 月 30 日 17:00。考生可从官网首页点击“进入报名”查看各个考点的报名、缴费、机房环境等详细信息。</p><p>建议报名的考生关注微信公众号：PATest-cn。所有考试相关重要通知都将由此公众号第一时间发布。</p><p>请注意：</p><ol><li><p>原 PAT 报名网站的用户请到<a href="https://www.patest.cn/bind_old_reg_user" target="_blank">https://www.patest.cn/bind_old_reg_user</a>将旧版账号与新版“拼题A”账号绑定；原 PAT 官网用户请到<a href="https://www.patest.cn/bind_old_pat_user" target="_blank">https://www.patest.cn/bind_old_pat_user</a>将旧版账号与新版“拼题A”账号绑定。</p></li><li><p>为避免恶意占位，PAT 系统将自动删除报名后超过 48 小时未付费的报名者；在报名截止前一周将删除报名后超过 24 小时未付费的报名者；缴费后再要求退考，考试中心将扣除所缴费用的 25% 作为人工处理的手续费；报名截止前 3 天将不接受退款请求。此外，由于支付宝有退款期限，超过三个月的报名将无法退款。</p></li><li><p>建议考生提前 10 分钟到达考场，查到自己的指定座位后，就座并将身份证件放在桌角待查，静待考试开始。考试迟到 20 分钟者禁止入场。</p></li><li><p>考试主服务器提供 31 种编程语言的编译\\解释器，但各考场只保证提供 C、C++、Java 的程序编译调试环境，题目时间上限一般根据 C 语言标准答案运行时间的 3~5 倍设定。</p></li></ol>', '2019-05-04 14:23:51', '1', 20, '2019-05-04 14:23:51'),
	(16, 12, '本站将在未来一周内随时迁移部署机器', '<p><b><i><u>本站将在未来一周内随时迁移部署机器，如有需求请提前申请</u></i></b><br></p>', '2019-05-19 06:08:11', '1', NULL, '2019-05-07 10:42:55'),
	(17, 12, '举办比赛请先申请', '<p>因为目前只有一台机器，而且机器负载一直较高，如举办比赛可能会遇到一些问题，所以请至少提前5天提出申请。</p><p>请使用密码<code>3US7JidxfIYWi1k5</code>填写<a href="http://www.baidu.com" target="_blank">表单</a></p>', '2019-05-19 06:15:29', '1', NULL, '2019-05-19 06:15:29'),
	(18, 12, '毕业设计查重已经可以使用', '<ol><li>近两周检查毕业设计成果，有五位同学软件成果已基本实现预期功能，请近期抓紧时间撰写论文，下周一前将论文初稿发给我，下周三见面交流。另三位同学消极怠工，到目前尚未实现预期，请考虑一下是否要缓答辩！</li><li>毕业论文纸质稿上交到学院的时间是6月10上午11点，在这之前必须将打印稿给我检查过，有问题修改重新打印。最后打印稿统一交给我，收齐后上交学院。</li><li>毕业答辩时间6月15日。论文上交学院后到答辩之前的时间，一是要制作答辩PPT，二是可以继续完善软件系统，论文若有较多改动，可以在答辩当天到答辩老师处调换论文。此外，答辩当天答辩老师也可能会提出修改意见，答辩后要抓紧时间按要求修改。重新打印的论文还是交给我。</li></ol>', '2019-05-24 12:13:23', '1', NULL, '2019-05-24 12:13:23'),
	(19, 12, '近期毕业通知', '<ol><li>大家准备好材料</li><li>准备毕业</li></ol>', '2019-06-14 12:42:03', '1', NULL, '2019-06-14 12:42:03');
/*!40000 ALTER TABLE `news` ENABLE KEYS */;

-- 导出  表 online_judge.privilege 结构
CREATE TABLE IF NOT EXISTS `privilege` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int(11) unsigned NOT NULL COMMENT '用户帐号',
  `rightstr` char(30) COLLATE utf8_bin DEFAULT NULL COMMENT '分组',
  `defunct` char(1) COLLATE utf8_bin NOT NULL DEFAULT 'A' COMMENT '是否屏蔽(A:active I:inactive)',
  PRIMARY KEY (`id`),
  KEY `FK_privilege_users` (`user_id`),
  CONSTRAINT `FK_privilege_users` FOREIGN KEY (`user_id`) REFERENCES `users` (`user_id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=74 DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='用户分组';

-- 正在导出表  online_judge.privilege 的数据：~5 rows (大约)
/*!40000 ALTER TABLE `privilege` DISABLE KEYS */;
INSERT INTO `privilege` (`id`, `user_id`, `rightstr`, `defunct`) VALUES
	(1, 9, 'user', 'A'),
	(2, 10, 'admin_oh', 'A'),
	(3, 12, 'admin_bcfghjklo', 'A'),
	(5, 68, 'user', 'A'),
	(73, 52, 'user', 'A');
/*!40000 ALTER TABLE `privilege` ENABLE KEYS */;

-- 导出  表 online_judge.problems 结构
CREATE TABLE IF NOT EXISTS `problems` (
  `problem_id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT '问题ID',
  `title` varchar(200) COLLATE utf8_bin NOT NULL COMMENT '问题标题',
  `defunct` varchar(2) COLLATE utf8_bin NOT NULL DEFAULT '1' COMMENT '屏蔽-公开-部分公开-绝对私有0/1/2/(3)',
  `create_by` int(11) unsigned NOT NULL COMMENT '创建者',
  `hint` text COLLATE utf8_bin COMMENT '暗示',
  `created_at` datetime NOT NULL COMMENT '创建时间',
  `source` varchar(1024) COLLATE utf8_bin DEFAULT NULL COMMENT '问题来源',
  `description` text COLLATE utf8_bin COMMENT '问题描述',
  `click` int(11) DEFAULT '0' COMMENT '问题点击量',
  `accepted` int(11) DEFAULT '0' COMMENT '解决次数',
  `submit` int(11) DEFAULT '0' COMMENT '提交次数',
  `sample_input` text COLLATE utf8_bin COMMENT '输入',
  `sample_output` text COLLATE utf8_bin COMMENT '输出',
  `memory_limit` int(11) unsigned NOT NULL COMMENT '空间限制(MB)',
  `time_limit` int(11) unsigned NOT NULL COMMENT '时间限制(ms)',
  `output` text COLLATE utf8_bin COMMENT '输出描述',
  `input` text COLLATE utf8_bin COMMENT '输入描述',
  `display_id` int(11) DEFAULT '1' COMMENT '显示序号',
  `description_image_url` varchar(1024) COLLATE utf8_bin DEFAULT NULL COMMENT '题目描述图片',
  PRIMARY KEY (`problem_id`),
  KEY `FK_problems_users` (`create_by`)
) ENGINE=InnoDB AUTO_INCREMENT=76 DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='题目表';

-- 正在导出表  online_judge.problems 的数据：~46 rows (大约)
/*!40000 ALTER TABLE `problems` DISABLE KEYS */;
INSERT INTO `problems` (`problem_id`, `title`, `defunct`, `create_by`, `hint`, `created_at`, `source`, `description`, `click`, `accepted`, `submit`, `sample_input`, `sample_output`, `memory_limit`, `time_limit`, `output`, `input`, `display_id`, `description_image_url`) VALUES
	(11, '陶陶摘苹果', '1', 12, '', '2018-09-25 15:22:59', 'NOIP全国联赛普及组-2005年NOIP全国联赛普及组', '<h4>陶陶家的院子里有一棵苹果树，每到秋天树上就会结出10个苹果。苹果成熟的时候，陶陶就会跑去摘苹果。陶陶有个30厘米高的板凳，当她不能直接用手摘到苹果的时候，就会踩到板凳上再试试。</h4><h4>现在已知10个苹果到地面的高度，以及陶陶把手伸直的时候能够达到的最大高度，请帮陶陶算一下她能够摘到的苹果的数目。假设她碰到苹果，苹果就会掉下来。</h4>', 0, 0, 0, '100 200 150 140 129 134 167 198 200 111\n110', '5', 64, 1000, '<h4>每组输出包括一行，这一行只包含一个整数，表示陶陶能够摘到的苹果的数目。<br></h4>', '<h4>每组输入数据包括两行。第一行包含10个100到200之间（包括100和200）的整数（以厘米为单位）分别表示10个苹果到地面的高度，两个相邻的整数之间用一个空格隔开。第二行只包括一个100到120之间（包含100和120）的整数（以厘米为单位），表示陶陶把手伸直的时候能够达到的最大高度。</h4>', 1, NULL),
	(16, 'ISBN号码', '2', 12, '', '2019-02-27 16:15:58', 'NOIP全国联赛普及组-2008年NOIP全国联赛普及组 ', '<h4>每一本正式出版的图书都有一个ISBN号码与之对应，ISBN码包括9位数字、1位识别码和3位分隔符，其规定格式如“x-xxx-xxxxx-x”，其中符号“-”是分隔符（键盘上的减号），最后一位是识别码，例如0-670-82162-4就是一个标准的ISBN码。ISBN码的首位数字表示书籍的出版语言，例如0代表英语；第一个分隔符“-”之后的三位数字代表出版社，例如670代表维京出版社；第二个分隔之后的五位数字代表该书在出版社的编号；最后一位为识别码。</h4><h4>识别码的计算方法如下：</h4><h4>首位数字乘以1加上次位数字乘以2...以此类推，用所得的结果mod 11，所得的余数即为识别码，如果余数为10，则识别码为大写字母X。例如ISBN号码0-670-82162-4中的识别码4是这样得到的：对067082162这9个数字，从左至右，分别乘以1，2，...，9，再求和，即0×1+6×2+...+2×9=158，然后取158 mod 11的结果4作为识别码。</h4><h4>你的任务是编写程序判断输入的ISBN号码中识别码是否正确，如果正确，则仅输出“Right”；如果错误，则输出你认为是正确的ISBN号码。</h4><h4><br></h4>', 0, 0, 0, '0-670-82162-4\n\n0-670-82162-0', 'Right\n\n0-670-82162-4', 64, 1000, '<h4>每组输出共一行，假如输入的ISBN号码的识别码正确，那么输出“Right”，否则，按照规定的格式，输出正确的ISBN号码（包括分隔符“-”）。<br></h4>', '<h4>每组输入数据只有一行，是一个字符序列，表示一本书的ISBN号码（保证输入符合ISBN号码的格式要求）。<br></h4>', 1, NULL),
	(17, '方阵填数', '2', 12, '<p>6</p><p>-------------------------</p><p>16 17 18 19 20 1</p><p>15 30 31 32 21 2</p><p>14 29 36 33 22 3</p><p>13 28 35 34 23 4</p><p>12 27 26 25 24 5</p><p>11 10 9 8 7 6</p>', '2019-04-15 16:39:48', 'NOIP全国联赛普及组 1995年NOIP全国联赛普及组 ', '<p>在一个N*N的方阵中，填入1，2，……N*N个数，并要求构成如下的格式：</p><p>例如：</p><p>N=5</p><p>13 14 15 16 &nbsp;1</p><p>12 23 24 17 &nbsp;2</p><p>11 22 25 18 &nbsp;3</p><p>10 21 20 19 &nbsp;4</p><p>9 &nbsp;8 &nbsp;7 &nbsp;6 &nbsp;5</p><p>N=6</p><p>16 17 18 19 20 &nbsp;1</p><p>15 30 31 32 21 &nbsp;2</p><p>14 29 36 33 22 &nbsp;3</p><p>13 28 35 34 23 &nbsp;4</p><p>12 27 26 25 24 &nbsp;5</p><p>11 10 &nbsp;9 &nbsp;8 &nbsp;7 &nbsp;6</p>', 0, 0, 0, '5', '13 14 15 16 1\n12 23 24 17 2\n11 22 25 18 3\n10 21 20 19 4\n9 8 7 6 5', 64, 1000, '<h4>输出构成的方阵。<br></h4>', '<h4>每个测试文件只包含一组测试数据，每组输入一个N。<br></h4>', 1, NULL),
	(19, '二进制数问题', '2', 9, '', '2019-04-26 15:42:21', 'NOIP全国联赛普及组 1995年NOIP全国联赛普及组', '<p>若将一个正整数化为二进制数，在此二进制数中，我们将数字1的个数多于数字0的个数的这类二进制数称为A类数，否则就称其为B类数。</p><p>例如：</p><p>（13）10=（1101）2</p><pre><code>    其中1的个数为3，0的个数为1，则称此数为A类数； \n</code></pre><p>（10）10=（1010）2</p><pre><code>    其中1的个数为2，0的个数也为2，称此数为B类数； \n</code></pre><p>（24）10=（11000）2</p><pre><code>    其中1的个数为2，0的个数为3，则称此数为B类数； \n</code></pre><p>程序要求：</p><p>求出1～1000之中（包括1与1000），全部A、B两类数的个数。</p>', 0, 0, 0, '无', '本题结果是唯一的，所以不提供输出样例。', 64, 1000, '<p>在一行中输出两个整数A和B，A表示A类数的个数，B表示B类数的个数，AB之间由一个空格分隔，除此之外不要再输出其他多余的东西。</p>', '<p>无输入。</p>', 1, NULL),
	(21, '编码问题', '2', 10, '<p>6</p><h2>B=(0,0,0,3,1,2)</h2><p>A=(4,3,0,5,1,2)</p>', '2019-04-26 15:44:53', 'NOIP全国联赛普及组 1995年NOIP全国联赛普及组 ', '<p>设有一个数组 A:ARRAY[0..N-1] OF INTEGER；数组中存放的元素为0～N-1之间的整数，且A[i]≠A[j]（当i≠j时）。</p><p>例如：</p><pre><code>   N=6时，有：A=(4,3,0,5,1,2) \n\n   此时，数组A的编码定义如下： \n\n   A[0]的编码为0； \n\n   A[i]的编码为：在A[0]，A[1]，……A[i-1]中比A[i]的值小的个数（i=1，2……N-1） \n\n∴上面数组A的编码为：B=(0,0,0,3,1,2) \n</code></pre><p>程序要求解决以下问题：</p><p>①   给出数组A后，求出其编码；</p><p>②   给出数组A的编码后，求出A中的原数据。</p>', 0, 0, 0, '6\nA=(4,3,0,5,1,2)', 'B=(0,0,0,3,1,2)', 64, 1000, '<p>当输入的是A=(...)，则输出其编码。</p><p>当输入的是B=(...)，则输出A中的原数据。</p><p>输出数据的格式和输入数据的格式是一样的。</p>', '<p>每个测试文件只包含一组测试数据，每组输入包含三行。</p><p>第一行输入整数N；</p><p>第二行输入有两种可能：</p><p>例如：</p><p>A=(4,3,0,5,1,2)</p><p>或</p><p>B=(0,0,0,3,1,2)</p><p>其中输入中的逗号和括号都是英文状态下的。</p>', 1, NULL),
	(23, '乘法运算', '2', 10, '<p>16 8</p><hr><p>168128</p>', '2019-04-26 15:52:41', 'NOIP全国联赛普及组 1996年NOIP全国联赛普及组', '<p>从键盘读入2个100以内的正整数，进行乘法运算并以竖式输出。 例如，输入：89 13                     又如，输入：16 8</p><pre><code>           输出：       89                            输出：     16 \n\n                         × 13                                        ×   8 \n\n                           267                                         128 \n\n                           89  \n\n                         1157 \n</code></pre>', 0, 0, 0, '89 13', '89\n13\n267\n89\n1157', 64, 1000, '<p>对于每组输入数据，输出两个整数进行乘法运算的竖式。为了简单起见，只需从上到下输出竖式里面的数即可，具体格式见样例输出。</p>', '<p>每个测试文件只包含一组测试数据，每组输入数据为两个100以内的正整数，之间由一个空格分隔。</p>', 1, NULL),
	(24, '最大和', '2', 12, '', '2019-04-26 16:40:39', 'GZU ', '<p>现给定一串数N，求出连续的数相加的最大值，例如：1 6 9 -5 4，连续数的最大和就是1+6+9=16；6 -3 4 0</p><p>-1，连续数的最大和是6+（-3）+4=7；</p>', 0, 0, 0, '5\n1 6 9 -5 4\n5\n6 -3 4 0 -1', '16\n7', 64, 1000, '<p>对于每组测试数据输出连续数的最大和</p>', '<p>测试包含多组测试数据,每组测试数据包含两行，</p><p>第一行输入一个整数N</p><p>1&lt;=N&lt;=100</p><p>接下来一行含有N个数，保证每个数取值范围是（-100000，+100000），两个数中间用空格隔开</p>', 1, NULL),
	(25, '最长上升子序列', '2', 9, '', '2019-04-26 16:47:55', 'BJWC2018 高级 ', '<p>现在有一个长度为n的随机排列，求它的最长上升子序列长度的期望。 为了避免精度误差，你只需要输出答案模998244353的余数。</p>', 0, 0, 0, '2 ', '499122178\n【样例说明】\n这是3/2。 ', 64, 1000, '<p>输出只包含一个非负整数，表示答案模998244353的余数。 可以证明，答案一定为有理数，设其为a/b（a、b为互质的整数），你输出的整数为x， 则你需要保证0≤x&lt;998244353且a与bx模998244353同余。</p>', '<p>输入只包含一个正整数n。</p><p>对于 100%的数据，1≤n≤28。共有 25组数据  ，对于第 i组数据 （1≤i≤25）， n=i+3。</p>', 1, NULL),
	(27, '加分二叉树', '2', 9, '', '2019-04-26 16:54:26', 'NOIP全国联赛提高组 2003年NOIP全国联赛提高组 ', '<p>设一个n个节点的二叉树tree的中序遍历为（l，2，3，...，n），其中数字1，2，3，...，n为节点编号。每个节点都有一个分数（均为正整数），记第j个节点的分数为di，tree及它的每个子树都有一个加分，任一棵子树subtree（也包含tree本身）的加分计算方法如下：</p><pre><code>subtree的左子树的加分×subtree的右子树的加分＋subtree的根的分数 \n\n若某个子树为主，规定其加分为1，叶子的加分就是叶节点本身的分数。不考虑它的空子树。 \n</code></pre><p>试求一棵符合中序遍历为（1，2，3，...，n）且加分最高的二叉树tree。要求输出：    （1）tree的最高加分    （2）tree的前序遍历</p>', 0, 0, 0, '5\n5 7 1 2 10', '145\n3 1 2 4 5', 64, 1000, '<p>第1行：一个整数，为最高加分（结果不会超过4,000,000,000）。第2行：n个用空格隔开的整数，为该树的前序遍历。</p>', '<p>第1行：一个整数n（n＜30），为节点个数。第2行：n个用空格隔开的整数，为每个节点的分数（分数＜100）。</p>', 1, NULL),
	(32, '字符串编辑', '2', 9, '', '2019-04-28 18:32:17', 'NOIP全国联赛普及组 1996年NOIP全国联赛普及组 ', '<p>从键盘输入一个字符串（长度&lt;=40个字符），并以字符 \'.\'结束。</p><p>例如：\'This is a book.\' 现对该字符串进行编辑，编辑功能有：</p><p>D：删除一个字符，命令的方式为：</p><pre><code> D a  其中a为被删除的字符\n\n 例如：D s  表示删除字符 \'s\' ，若字符串中有多个 \'s\'，则删除第一次出现的。\n\n          如上例中删除的结果为： \'Thi is a book.\'\n</code></pre><p>I：插入一个字符，命令的格式为：</p><pre><code>I a1 a2  其中a1表示插入到指定字符前面，a2表示将要插入的字符。\n\n例如：I s d  表示在指定字符 \'s\' 的前面插入字符 \'d\' ，若原串中有多个 \'s\' ，则插入在最后一个字符的前面。\n\n         如上例中：\n               原串：\'This is a book.\'\n\n               插入后：\'This ids a book.\'\n</code></pre><p>R：替换一个字符，命令格式为：</p><pre><code> R a1 a2  其中a1为被替换的字符，a2为替换的字符，若在原串中有多个a1则应全部替换。\n\n 例如： 原串： \'This is a book.\'\n\n           输入命令：R o e\n\n           替换后的字符串为：\'This is a beek.\'\n</code></pre><p>在编辑过程中，若出现被改的字符不存在时，则给出提示信息"Not exist"。</p>', 0, 0, 0, 'This is a book.\nD s', 'Thi is a book.', 64, 1000, '<p>对于每组输入数据，输出编辑后的字符串，如果被改的字符不存在，则输出"Not exist"（引号不输出）。</p>', '<p>每个测试文件只包含一组测试数据，每组输入数据包含两行：</p><p>第一行，输入一个字符串，表示原串；</p><p>第二行，输入一个字符串，表示命令。</p>', 1, NULL),
	(33, '数制转换', '1', 9, '', '2019-04-28 18:38:44', 'NOIP全国联赛提高组 1996年NOIP全国联赛提高组 ', '<p>设有一个字符串A$的结构为：A$=\'mp\'</p><p>其中m为数字串（长度&lt;=20），而n,p均为1或2位的数字串（其中所表达的内容在2-10之间）。</p><p>程序要求：</p><p>从键盘上读入A$后（不用正确性检查），将A$中的数字串m（n进制），以p进制的形式输出。</p><p>例如：A$=\'48&lt;10&gt;8\'</p><pre><code>     其意义为：将10进制数48，转换成8进制数输出。\n\n\n     输出结果为：48&lt;10&gt;=60&lt;8&gt;\n</code></pre>', 0, 0, 0, '48<10>8', '48<10>=60<8>', 64, 1000, '<p>对于每组输入数据，输出数制转换后的结果，具体格式见样例输出。</p>', '<p>每个测试文件只包含一组测试数据，每组输入一个字符串，形式如mp。</p>', 1, NULL),
	(34, '排三角形', '2', 12, '', '2019-04-28 23:58:09', 'NOIP全国联赛普及组 1997年NOIP全国联赛普及组 ', '<p>将1，2，······,9共9个数排成下列形态的三角形。</p><pre><code>                    a\n\n                 b      c\n\n              d            e\n\n            f     g     h     i\n\n\n\n其中：a～i分别表示1，2，······,9中的一个数字，并要求同时满足下列条件：\n\n（1）a&lt;f&lt;i;\n\n（2）b&lt;d, g&lt;h, c&lt;e\n\n（3）a+b+d+f=f+g+h+i=i+e+c+a=P\n</code></pre><p>程序要求：</p><pre><code>  根据输入的边长之和P，输出所有满足上述条件的三角形的个数。\n</code></pre>', 0, 0, 0, '23', '2', 64, 1000, '<p>对于每组输入数据，输出所有满足上述条件的三角形的个数。</p><p>如果无解，则输出"Not exist"（引号不输出）。</p>', '<p>每个测试文件只包含一组测试数据，每组输入一个整数P，表示边长之和。</p>', 1, NULL),
	(35, '上下火车', '2', 12, '', '2019-05-23 14:35:16', 'NOIP全国联赛提高组 1998年NOIP全国联赛提高组', '<p>火车从始发站（称为第1站）开出，在始发站上车的人数为a，然后到达第2站，在第2站有人上、下车，但上、下车的人数相同，因此在第2站开出时（即在到达第3站之前）车上的人数保持为a人。从第3站起（包括第3站）上、下车的人数有一定规律：上车的人数都是前两站上车人数之和，而下车人数等于上一站上车人数，一直到终点站的前一站（第n-1站），都满足此规律。现给出的条件是：共有N个车站，始发站上车的人数为a，最后一站下车的人数是m（全部下车）。试问x站开出时车上的人数是多少？</p>', 0, 0, 0, '5 7 32 4', '13', 64, 1000, '<p>对于每组输入数据，输出从x站开出时车上的人数。</p>', '<p>每个测试文件只包含一组测试数据，每组输入四个整数a、n、m和x。</p>', 1, NULL),
	(38, '数字反转', '3', 12, '', '2019-05-23 17:41:56', 'NOIP全国联赛普及组-2011年NOIP全国联赛普及组 ', '<p>给定一个整数，请将该数各个位上数字反转得到一个新数。新数也应满足整数的常见形式，即除非给定的原数为零，否则反转后得到的新数的最高位数字不应为零。</p>', 0, 0, 0, '123\n\n-380', '321\n\n-83', 64, 1000, '<p>每组输出共1行，一个整数，表示反转后的新数。</p>', '<p>每组输入数据共1行，一个整数N（-1,000,000,000≤N≤1,000,000,000）。</p>', 1, NULL),
	(39, '计算(calc)', '3', 10, '<p>100 ％的数据满足：算式长度&lt;=30 其中所有数据在 2^31-1 的范围内。</p>', '2019-05-30 17:08:19', '一本通2018 数据结构 栈 ', '<p>小明在你的帮助下，破密了 Ferrari 设的密码门，正要往前走，突然又出现了一个密码门 ，门上有一个算式，其中只有<code>(</code>，<code>)</code>，<code>0-9</code>，<code>+</code>，<code>-</code>，<code>*</code>，<code>/</code>，<code>^</code>求出的值就是密码。小明数学学得不好，还需你帮他的忙。（<code>/</code>用整数除法）</p>', 0, 0, 0, '1+(3+2)*(7^2+6*9)/(2)', '258 ', 64, 1000, '<p>输出密码。</p>', '<p>输入算式。</p>', 1, NULL),
	(40, '回文数', '1', 10, '', '2019-06-08 11:08:49', 'NOIP全国联赛普及组 1999年NOIP全国联赛普及组 ', '<p>若一个数（首位不为零）从左向右读与从右向左读都一样，我们就将其称之为回文数。</p><p>例如：给定一个10进制数56，将56加56（即把56从右向左读），得到121是一个回文数。</p><p>又如：对于10进制数87：</p><ul><li>STEP1：87+78 = 165</li></ul><ul><li>STEP2：165+561 = 726</li></ul><ul><li>STEP3：726+627 = 1353</li></ul><ul><li>STEP4：1353+3531 = 4884</li></ul><p>在这里的一步是指进行了一次N进制的加法，上例最少用了4步得到回文数4884。</p>', 0, 0, 0, '9\n87', 'STEP=6', 64, 1000, '<p>对于每组输入数据，输出最少经过几步可以得到回文数。如果在30步以内（包含30步）不可能得到回文数，则输出"Impossible!"。</p>', '<p>每个测试文件只包含一组测试数据，每组输入一个N（2&lt;=N&lt;=10，N=16）进制数M，每组的第一行输入N，第二行输入M。</p>', 1, NULL),
	(41, '旅行家的预算', '1', 9, '', '2019-06-08 11:11:51', 'NOIP全国联赛普及组 1999年NOIP全国联赛普及组 ', '<p>一个旅行家想驾驶汽车以最少的费用从一个城市到另一个城市（假设出发时油箱是空的）。给定两个城市之间的距离D1、汽车油箱的容量C（以升为单位）、每升汽油能行驶的距离D2、出发点每升汽油价格P和沿途油站数N（N可以为零），油站i离出发点的距离Di、每升汽油价格Pi（i=1，2，…，N）。</p>', 0, 0, 0, '275.6 11.9 27.4 2.8 2\n102.0 2.9\n220.0 2.2', '26.95', 64, 1000, '<p>对于每组输入数据，输出最小费用，结果四舍五入至小数点后两位。如果无法到达目的地，则输出"No Solution"（引号不输出）。</p>', '<p>每个测试文件只包含一组测试数据，每组输入数据的第一行输入D1、C、D2、P、N，其中D1、C、D2、P均为浮点数，N为整数。</p><p>接下来N行，每行输入两个浮点数表示离出发点的距离Di和每升汽油的价格Pi。</p>', 1, NULL),
	(42, '砝码称重', '1', 9, '', '2019-06-08 11:15:39', 'NOIP全国联赛提高组-1996年NOIP全国联赛提高组', '<p>设有1g、2g、3g、5g、10g、20g的砝码各若干枚（其总重&lt;=1000）。</p><p>现在给你这六种砝码的数量，请你计算用这些砝码能称出的不同重量的个数，但不包括一个砝码也不用的情况。</p><p>如输入：1 1 0 0 0 0</p><p>输出：Total=3  表示可以称出1g，2g，3g三种不同的重量。</p>', 0, 2, 9, '1 1 0 0 0 0', 'Total=3', 64, 1000, '<p>对于每组输入数据，输出 Total=N。（N表示用这些砝码能称出的不同重量的个数，但不包括一个砝码也不用的情况）</p>', '<p>每个测试文件只包含一组测试数据，每组输入六个整数，例如：</p><p>输入 a1  a2  a3  a4  a5  a6</p><pre><code>  （表示1g砝码有a1个，2g砝码有a2个，…，20g砝码有a6个）\n</code></pre>', 1, NULL),
	(43, '组成三位数', '1', 9, '<p>本题无输入。</p><p>本题结果是唯一的，所以不提供输出样例。</p>', '2019-06-08 11:20:12', 'NOIP全国联赛普及组 1998年NOIP全国联赛普及组 ', '<p>将1，2，…，9共9个数分成三组，分别组成三个三位数，且使这三个三位数构成1：2：3的比例，试求出所有满足条件的三个三位数。</p><p>例如：三个三位数192，384，576满足以上条件。</p>', 0, 1, 1, '无', '无', 64, 1000, '<p>输出所有符合要求的三个三位数，每一组占一行，数字之间由一个空格分隔。</p><p>每组中的三个数字按照从小到大输出，各组之间按照每组的第一个数从小到大输出。</p>', '<p>本题无输入。</p>', 1, NULL),
	(44, '联接最大数', '1', 9, '', '2019-06-08 11:22:06', 'NOIP全国联赛提高组 1998年NOIP全国联赛提高组 ', '<p>设有n个正整数（n≤20），将它们联接成一排，组成一个最大的多位整数。</p><p>例如：n=3时，3个整数13，312，343联接成的最大整数为：34331213</p><p>又如：n=4时，4个整数7，13，4，246联接成的最大整数为：7424613</p>', 0, 0, 0, '3\n13 312 343', '34331213', 64, 1000, '<p>对于每组输入数据，输出n个正整数联接成的最大的多位整数。</p>', '<p>每个测试文件只包含一组测试数据，每组输入数据的第一行输入一个正整数n（n≤20）。</p><p>接下来一行输入n个正整数。</p>', 1, NULL),
	(45, 'Cantor表', '1', 9, '', '2019-06-08 11:36:42', 'NOIP全国联赛普及组 1999年NOIP全国联赛普及组 ', '<p>现代数学的著名证明之一是Georg Cantor证明了有理数是可枚举的。他是用下面这一张表来证明这一命题的：<img alt="20140110143701_72347.jpg" src="http://localhost:8088/api-oj/image?imageName=15599649381158rOh20140110143701_72347.jpg" width="586" height="169"></p><p>我们以Z字形给上表的每一项编号。第一项是1/1，然后是1/2，2/1，3/1，2/2，…<br></p>', 0, 0, 0, '7', '1/4', 64, 1000, '<p>对于每组输入数据，输出表中的第N项。</p>', '<p>每个测试文件只包含一组测试数据，每组输入一个正整数N（1≤N≤10000000）。</p>', 1, NULL),
	(46, '拦截导弹', '1', 9, '', '2019-06-08 11:40:50', 'NOIP全国联赛提高组 1999年NOIP全国联赛提高组 ', '<p>某国为了防御敌国的导弹袭击，发展出一种导弹拦截系统。但是这种导弹拦截系统有一个缺陷：虽然它的第一发炮弹能够到达任意的高度，但是以后每一发炮弹都不能高于前一发的高度。某天，雷达捕捉到敌国的导弹来袭。由于该系统还在试用阶段，所以只有一套系统，因此有可能不能拦截所有的导弹。</p>', 0, 0, 3, '389 207 155 300 299 170 158 65', '6\n2', 64, 1000, '<p>对于每组输入数据，第一行输出这套系统最多能拦截多少导弹，第二行输出如果要拦截所有导弹最少要配备多少套这种导弹拦截系统。</p>', '<p>每个测试文件只包含一组测试数据，每组输入若干个整数，表示导弹依次飞来的高度（雷达给出的高度数据是不大于30000的正整数）。</p>', 1, NULL),
	(47, '邮票面值设计', '1', 9, '', '2019-06-08 11:50:15', 'NOIP全国联赛提高组 1999年NOIP全国联赛提高组 ', '<p>给定一个信封，最多只允许粘贴N张邮票，计算在给定K（N+K≤40）种邮票的情况下（假定所有的邮票数量都足够），如何设计邮票的面值，能得到最大值MAX，使在1～MAX之间的每一个邮资值都能得到。例如，N=3，K=2，如果面值分别为1分、4分，则在1分～6分之间的每一个邮资值都能得到（当然还有8分、9分和12分）；如果面值分别为1分、3分，则在1分～7分之间的每一个邮资值都能得到。可以验证当N=3，K=2时，7分就是可以得到的连续的邮资最大值，所以MAX=7，面值分别为1分、3分。</p>', 0, 0, 4, '3 2', '1 3\nMAX=7', 64, 1000, '<p>对于每组输入数据，第一行输出每种邮票的面值，面值之间由一个空格分隔，最后一个面值的后面不要输出空格。第二行输出连续最大能到的面值数，具体格式见样例输出。数据保证答案唯一。</p>', '<p>每个测试文件只包含一组测试数据，每组输入两个整数N和K（N+K≤40）。</p>', 1, NULL),
	(48, '计算器的改良', '1', 9, '', '2019-06-08 12:11:03', 'NOIP全国联赛普及组 2000年NOIP全国联赛普及组 ', '<p>NCL是一家专门从事计算器改良与升级的实验室，最近该实验室收到了某公司所委托的一个任务：需要在该公司某型号的计算器上加上解一元一次方程的功能。实验室将这个任务交给了一个刚进入的新手ZL先生。为了很好的完成这个任务，ZL先生首先研究了一些一元一次方程的实例：</p><p>4+3x=8</p><p>6a-5+1=2-2a</p><p>-5+12y=0</p><p>ZL先生被主管告之，在计算器上键入的一个一元一次方程中，只包含整数、小写字母及+、-、=这三个数学符号（当然，符号"─"既可作减号，也可作负号）。方程中并没有括号，也没有除号，方程中的字母表示未知数。</p><p>编写程序，解输入的一元一次方程，将解方程的结果（精确至小数点后三位）输出至屏幕。你可假设对键入的方程的正确性的判断是由另一个程序员在做，或者说可认为键入的一元一次方程均为合法的，且有唯一实数解。</p>', 0, 0, 0, '6a-5+1=2-2a', 'a=0.750', 64, 1000, '<p>对于每组输入数据，解方程的结果（精确至小数点后三位）输出至屏幕。</p>', '<p>每个测试文件只包含一组测试数据，每组输入一个字符串，表示一个一元一次方程。</p>', 1, NULL),
	(49, '乘积最大', '1', 9, '', '2019-06-11 14:20:18', 'NOIP全国联赛普及组 2000年NOIP全国联赛普及组', '<p>今年是国际数学联盟确定的“2000——世界数学年”，又恰逢我国著名数学家华罗庚先生诞辰90周年。在华罗庚先生的家乡江苏金坛，组织了一场别开生面的数学智力竞赛的活动，你的一个好朋友XZ也有幸得以参加。活动中，主持人给所有参加活动的选手出了这样一道题目：</p><p>设有一个长度为N的数字串，要求选手使用K个乘号将它分成K+1个部分，找出一种分法，使得这K+1个部分的乘积能够为最大。</p><p>同时，为了帮助选手能够正确理解题意，主持人还举了如下的一个例子：</p><p>有一个数字串：312， 当N=3，K=1时会有以下两种分法：</p><ul><li>3*12=36<br></li><li>31*2=62<br></li></ul><p>这时，符合题目要求的结果是：31*2=62</p><p>现在，请你帮助你的好朋友XZ设计一个程序，求得正确的答案。</p>', 0, 0, 0, '4 2\n1231', '62', 64, 1000, '<p>对于每组输入数据，输出所求得的最大乘积（一个自然数）。<br></p>', '<p>每个测试文件只包含一组测试数据，每组输入有两行：</p><p>第一行输入两个自然数N，K（6≤N≤40，1≤K≤6）。</p><p>第二行输入一个长度为N的数字串。</p>', 1, NULL),
	(50, '单词接龙', '1', 9, '', '2019-06-11 14:21:44', 'NOIP全国联赛普及组 2000年NOIP全国联赛普及组 ', '<p>单词接龙是一个与我们经常玩的成语接龙相类似的游戏，现在我们已知一组单词，且给定一个开头的字母，要求出以这个字母开头的最长的“龙”（每个单词都最多在“龙”中出现两次），在两个单词相连时，其重合部分合为一部分，例如beast和astonish，如果接成一条龙则变为beastonish，另外相邻的两部分不能存在包含关系，例如at和atide间不能相连。<br></p>', 0, 0, 0, '5\nat\ntouch\ncheat\nchoose\ntact\na', '23', 64, 1000, '<p>对于每组输入数据，输出以此字母开头的最长的“龙”的长度。</p><p>下面的测试样例最后连成的“龙”为atoucheatactactouchoose。</p>', '<p>每个测试文件只包含一组测试数据，每组输入的第一行为一个单独的整数n（n&lt;=20）表示单词数，以下n行每行有一个单词，输入的最后一行为一个单个字符，表示“龙”开头的字母。你可以假定以此字母开头的“龙”一定存在。<br></p>', 1, NULL),
	(51, '进制转换', '1', 9, '<p><img alt="TIM截图20190611142423.png" src="http://localhost:8088/api-oj/image?imageName=1560234273381ZO67TIM截图20190611142423.png" width="937" height="183"><br></p>', '2019-06-11 14:24:51', 'NOIP全国联赛提高组 2000年NOIP全国联赛提高组 ', '<p>我们可以用这样的方式来表示一个十进制数： 将每个阿拉伯数字乘以一个以该数字所处位置的（值减1）为指数，以10为底数的幂之和的形式。例如：123可表示为1*102+2*101+3*100这样的形式。</p><p>与之相似的，对二进制数来说，也可表示成每个二进制数码乘以一个以该数字所处位置的（值-1）为指数，以2为底数的幂之和的形式。一般说来，任何一个正整数R或一个负整数-R都可以被选来作为一个数制系统的基数。如果是以R或-R为基数，则需要用到的数码为 0，1，....R-1。例如，当R=7时，所需用到的数码是0，1，2，3，4，5和6，这与其是R或-R无关。如果作为基数的数绝对值超过10，则为了表示这些数码，通常使用英文字母来表示那些大于9的数码。例如对16进制数来说，用A表示10，用B表示11，用C表示12，用D表示13，用E表示14，用F表示15。<br>在负进制数中是用-R作为基数，例如-15（十进制）相当于110001（-2进制），并且它可以被表示为2的幂级数的和数：</p><p><img alt="TIM截图20190611142309.png" src="http://localhost:8088/api-oj/image?imageName=1560234209549wLdYTIM截图20190611142309.png" width="519" height="36"><br></p><p>设计一个程序，读入一个十进制数和一个负进制数的基数，并将此十进制数转换为此负进制下的数：-R∈｛-2，-3，-4，...，-20｝。<br></p>', 0, 0, 0, '30000 -2', '30000=11011010101110000(base-2)', 64, 1000, '<p>对于每组输入数据，输出此负进制数及其基数，若此基数超过10，则参照16进制的方式处理。<br></p>', '<p>每个测试文件只包含一组测试数据，每组输入两个整数，第一个是十进制数N（-32768&lt;=N&lt;=32767）；第二个是负进制数的基数-R。<br></p>', 1, NULL),
	(52, '方格取数', '1', 9, '', '2019-06-11 14:31:39', 'NOIP全国联赛提高组 2000年NOIP全国联赛提高组 ', '<p>设有N*N的方格图(N&lt;=10,我们将其中的某些方格中填入正整数,而其他的方格中则放入数字0。如下图所示（见样例）：<br></p><p><img alt="TIM截图20190611142925.png" src="http://localhost:8088/api-oj/image?imageName=1560234584199JteXTIM截图20190611142925.png" width="496" height="302"><br></p><p>某人从图的左上角的A 点出发，可以向下行走，也可以向右走，直到到达右下角的B点。在走过的路上，他可以取走方格中的数（取走后的方格中将变为数字0）。</p><p>此人从A点到B 点共走两次，试找出2条这样的路径，使得取得的数之和为最大。</p>', 0, 0, 0, '8\n2 3 13\n2 6 6\n3 5 7\n4 4 14\n5 2 21 \n5 6 4\n6 3 15\n7 2 14\n0 0 0', '67', 64, 1000, '<p>对于每组输入数据，只需输出一个整数，表示2条路径上取得的最大的和。<br></p>', '<p>每个测试文件只包含一组测试数据，每组输入的第一行为一个整数N（表示N*N的方格图），接下来的每行有三个整数，前两个表示位置，第三个数为该位置上所放的数。一行单独的0表示输入结束。<br></p>', 1, NULL),
	(53, '数的计算', '1', 9, '', '2019-06-11 14:34:36', 'NOIP全国联赛普及组 2001年NOIP全国联赛普及组 ', '<p>我们要求找出具有下列性质数的个数（包含输入的自然数n）：</p><p>先输入一个自然数n（n&lt;=1000），然后对此自然数按照如下方法进行处理：</p><p>1. 不作任何处理；</p><p>2. 在它的左边加上一个自然数，但该自然数不能超过原数的一半；</p><p>3. 加上数后，继续按此规则进行处理，直到不能再加自然数为止。</p>', 0, 0, 0, '6', '6', 64, 1000, '<p>对于每组输入数据，输出经过处理后的n的结果。<br></p>', '<p>每个测试文件只包含一组测试数据，每组输入一个自然数n（n&lt;=1000）。<br></p>', 1, NULL),
	(54, '最大公约数和最小公倍数问题', '1', 9, '', '2019-06-11 14:37:22', 'NOIP全国联赛普及组 2001年NOIP全国联赛普及组 ', '<p>输入二个正整数x0，y0（2&lt;=x0&lt;100000，2&lt;=y0&lt;=1000000），求出满足下列条件的P，Q的个数。</p><p>条件：</p><p>1. P，A是正整数；</p><p>2. 要求P，Q以x0为最大公约数，以y0为最小公倍数。</p><p>试求：</p><p>满足条件的所有可能的两个正整数的个数。</p>', 0, 0, 0, '3 60', '4', 64, 1000, '<p>对于每组输入数据，输出满足条件的所有可能的两个正整数的个数。</p><p>下面是对样例数据的说明：</p><p>输入3 60</p><p>此时的P Q分别为:</p><p>3 &nbsp; &nbsp; 60<br>15 &nbsp; 12<br>12 &nbsp; 15<br>60 &nbsp; 3</p><p>所以，满足条件的所有可能的两个正整数的个数共4种。</p>', '<p>每个测试文件只包含一组测试数据，每组两个正整数x0和y0（2&lt;=x0&lt;100000，2&lt;=y0&lt;=1000000）。<br></p>', 1, NULL),
	(55, '求先序排列', '3', 9, '', '2019-06-11 14:38:57', 'NOIP全国联赛普及组 2001年NOIP全国联赛普及组 ', '<p>给出一棵二叉树的中序与后序排列。求出它的先序排列。（约定树结点用不同的大写字母表示，长度&lt;=8）。<br></p>', 0, 0, 0, 'BADC\nBDCA', 'ABCD', 64, 1000, '<p>对于每组输入数据，输出二叉树的先序排列。<br></p>', '<p>每个测试文件只包含一组测试数据，每组输入包含两行，第一行输入一个字符串表示二叉树的中序排列，第二行输入一个字符串表示二叉树的后序排列。<br></p>', 1, NULL),
	(56, '装箱问题', '3', 9, '', '2019-06-11 15:00:02', 'NOIP全国联赛普及组 2001年NOIP全国联赛普及组 ', '<p>有一个箱子容量为V（正整数，0&lt;=V&lt;=20000），同时有n个物品（0&lt;n&lt;=30），每个物品有一个体积（正整数）。</p><p>要求n个物品中，任取若干个装入箱内，使箱子的剩余空间为最小。</p>', 0, 0, 0, '24\n6\n8\n3\n12\n7\n9\n7', '0', 64, 1000, '<p>对于每组输入数据，输出一个整数，表示箱子剩余空间。<br></p>', '<p>每个测试文件只包含一组测试数据，每组输入的第一行为一个整数V（0&lt;=V&lt;=20000），表示箱子的容量。</p><p>第二行输入一个整数n（0&lt;n&lt;=30），表示有n个物品。</p><p>接下来n行，每行输入一个正整数，表示每个物品的体积。</p>', 1, NULL),
	(57, '数的划分', '3', 9, '', '2019-06-11 15:01:47', 'NOIP全国联赛提高组2001年NOIP全国联赛提高组', '<p>将整数n分成k份，且每份不能为空，任意两份不能相同（不考虑顺序）。</p><p>例如：n=7，k=3，下面三种分法被认为是相同的。</p><p>1，1，5；</p><p>1，5，1；</p><p>5，1，1；</p><p>问有多少种不同的分法。</p>', 0, 0, 0, '7 3', '4', 64, 1000, '<p>对于每组输入数据，输出一个整数，即不同的分法。</p><p>下面是对样例数据的说明：</p><p>样例中的四种分法是：</p><p>1，1，5</p><p>1，2，4</p><p>1，3，3</p><p>2，2，3</p>', '<p>每个测试文件只包含一组测试数据，每组输入两个整数n和k（6&lt;n&lt;=200，2&lt;=k&lt;=6）。<br></p>', 1, NULL),
	(58, '级数求和', '1', 9, '', '2019-06-11 15:09:31', 'NOIP全国联赛普及组 2002年NOIP全国联赛普及组 ', '<p>已知：Sn= 1＋1/2＋1/3＋...＋1/n。显然对于任意一个整数K，当n足够大的时候，Sn大于K。</p><p>现给出一个整数K（1&lt;=k&lt;=15），要求计算出一个最小的n，使得Sn&gt;K。</p>', 0, 1, 1, '1', '2', 64, 1000, '<p>对于每组输入数据，输出要求计算出的最小的n，使得Sn&gt;K。<br></p>', '<p>每个测试文件只包含一组测试数据，每组一个整数k（1&lt;=k&lt;=15）。<br></p>', 1, NULL),
	(59, '产生数', '1', 9, '', '2019-06-11 15:11:40', 'NOIP全国联赛普及组 2002年NOIP全国联赛普及组 ', '<p>给出一个整数n（n&lt;1030) 和k个变换规则（k&lt;=15）。</p><p>规则：</p><p>一位数可变换成另一个一位数：</p><p>规则的右部不能为零。</p><p>例如：n=234。有规则（k＝2）：</p><p style="margin-left: 40px;">2-&gt;5</p><p style="margin-left: 40px;">3-&gt;6</p><p>上面的整数234经过变换后可能产生出的整数为（包括原数）：</p><p style="margin-left: 40px;">234</p><p style="margin-left: 40px;">534</p><p style="margin-left: 40px;">264</p><p style="margin-left: 40px;">564</p><p>共4种不同的产生数</p><p>问题：</p><p>给出一个整数n和k个规则。</p><p>求出：</p><p>经过任意次的变换（0次或多次），能产生出多少个不同整数。仅要求输出个数。</p>', 0, 0, 0, '234 2\n2 5\n3 6', '4', 64, 1000, '<p>对于每组输入数据，输出一个整数，表示满足条件的个数。<br></p>', '<p>每个测试文件只包含一组测试数据，每组输入的第一行输入两个整数n和k（n&lt;1030，k&lt;=15）。</p><p>接下来k行每行输入一个规则，每个规则由两个整数构成。</p>', 1, NULL),
	(60, '过河卒', '1', 9, '', '2019-06-11 15:24:16', 'NOIP全国联赛普及组 2002年NOIP全国联赛普及组 ', '<p>如图，A点有一个过河卒，需要走到目标B点。卒行走规则：可以向下、或者向右。同时在棋盘上的任一点有一个对方的马（如图中的C点），该马所在的点和所有跳跃一步可达的点称为对方马的控制点。例如图中C 点上的马可以控制9个点（图中的P1，P2...P8 和C）。卒不能通过对方马的控制点。<br></p><p><img alt="TIM截图20190611152226.png" src="http://localhost:8088/api-oj/image?imageName=15602377608205Fd3TIM截图20190611152226.png" width="738" height="468"><br></p><p>棋盘用坐标表示，A点（0,0）、B点（n,m）（n，m 为不超过20的整数，并由键盘输入），同样马的位置坐标是需要给出的（约定：C&lt;&gt;A，同时C&lt;&gt;B）。现在要求你计算出卒从A点能够到达B点的路径的条数。<br></p>', 0, 0, 0, '6 6 3 2', '17', 64, 1000, '<p>对于每组输入数据，输出一个整数，表示路径的条数。<br></p>', '<p>每个测试文件只包含一组测试数据，每组输入四个整数n，m，x，y。（（n,m）表示B点的坐标，（x,y）表示对方马的坐标<br></p>', 1, NULL),
	(61, '均分纸牌', '1', 9, '', '2019-06-11 15:29:17', 'NOIP全国联赛提高组 2002年NOIP全国联赛提高组 ', '<p>有N堆纸牌，编号分别为1，2，...，N。每堆上有若干张，但纸牌总数必为N的倍数。可以在任一堆上取若干张纸牌，然后移动。</p><p>移牌规则为：在编号为1的堆上取的纸牌，只能移到编号为2的堆上；在编号为N的堆上取的纸牌，只能移到编号为N-1的堆上；其他堆上取的纸牌，可以移到相邻左边或右边的堆上。</p><p>现在要求找出一种移动方法，用最少的移动次数使每堆上纸牌数都一样多。</p><p>例如N=4，4堆纸牌数分别为：</p><p>①　9　②　8　③　17　④　6</p><p>移动3次可达到目的：</p><p>从③取4张牌放到④（9 8 13 10）-&gt;从③取3张牌放到②（9 11 10 10）-&gt;从②取1张牌放到①（10 10 10 10）。</p>', 0, 1, 2, '4\n9 8 17 6', '3', 64, 1000, '<p>对于每组输入数据，输出所有堆均达到相等时的最少移动次数。<br></p>', '<p>每个测试文件只包含一组测试数据，每组输入的第一行输入一个整数N（1&lt;=N&lt;=100），表示有N堆纸牌。</p><p>接下来一行输入N个整数A1 A2...An，表示每堆纸牌初始数，1&lt;=Ai&lt;=10000。</p>', 1, NULL),
	(62, '字串变换', '1', 9, '', '2019-06-11 15:35:06', 'NOIP全国联赛提高组 2002年NOIP全国联赛提高组 ', '<p>已知有两个字串A$，B$及一组字串变换的规则（至多6个规则）：</p><p>A1$ -&gt; B1$</p><p>A2$ -&gt; B2$</p><p>规则的含义为：在 A$中的子串A1$可以变换为B1$、A2$可以变换为B2$...</p><p>例如：A$＝\'abcd\'　B$＝\'xyz\'</p><p>变换规则为：</p><p>\'abc\'-&gt;\'xu\'　\'ud\'-&gt;\'y\'　\'y\'-&gt;\'yz\'</p><p>则此时，A$可以经过一系列的变换变为B$，其变换的过程为：</p><p>\'abcd\'-&gt;\'xud\'-&gt;\'xy\'-&gt;\'xyz\'</p><p>共进行了三次变换，使得A$变换为B$。</p>', 0, 0, 0, 'abcd wyz\nabc xu\nud y\ny yz', '3', 64, 1000, '<p>对于每组输入数据，若在10步（包含10步）以内能将A$变换为B$，则输出最少的变换步数，否则输出"NO ANSWER!"<br></p>', '<p>每个测试文件只包含一组测试数据，每组输入的第一行输入两个字符串A$和B$。</p><p>接下来若干行输入变换规则：</p><p>A$ B$<br>A1$ B1$ \\<br>A2$ B2$ &nbsp;|-&gt; 变换规则<br>... ... &nbsp; &nbsp; &nbsp;/</p><p>所有字符串长度的上限为 20。</p>', 1, NULL),
	(63, '乒乓球', '1', 9, '', '2019-06-11 15:37:27', 'NOIP全国联赛普及组 2003年NOIP全国联赛普及组 ', '<p>国际乒联现在主席沙拉拉自从上任以来就立志于推行一系列改革，以推动乒乓球运动在全球的普及。其中11分制改革引起了很大的争议，有一部分球员因为无法适应新规则只能选择退役。华华就是其中一位，他退役之后走上了乒乓球研究工作，意图弄明白11分制和21分制对选手的不同影响。在开展他的研究之前，他首先需要对他多年比赛的统计数据进行一些分析，所以需要你的帮忙。</p><p>华华通过以下方式进行分析，首先将比赛每个球的胜负列成一张表，然后分别计算在11分制和21分制下，双方的比赛结果（截至记录末尾）。<br>比如现在有这么一份记录，（其中W表示华华获得一分，L表示华华对手获得一分）：<br>WWWWWWWWWWWWWWWWWWWWWWLW<br>在11分制下，此时比赛的结果是华华第一局11比0获胜，第二局11比0获胜，正在进行第三局，当前比分1比1。而在21分制下，此时比赛结果是华华第一局21比0获胜，正在进行第二局，比分2比1。如果一局比赛刚开始，则此时比分为0比0。<br>你的程序就是要对于一系列比赛信息的输入（WL形式），输出正确的结果。</p>', 0, 1, 1, 'WWWWWWWWWWWWWWWWWWWW\nWWLWE', '11:0\n11:0\n1:1\n\n21:0\n2:1', 64, 1000, '<p>输出由两部分组成，每部分有若干行，每一行对应一局比赛的比分（按比赛信息输入顺序）。其中第一部分是11分制下的结果，第二部分是21分制下的结果，两部分之间由一个空行分隔。<br></p>', '<p>每个输入文件包含若干行字符串（每行至多20个字母），字符串有大写的W、L和E组成。其中E表示比赛信息结束，程序应该忽略E之后的所有内容。<br></p>', 1, NULL),
	(64, '传染病控制', '1', 9, '', '2019-06-11 15:40:15', 'NOIP全国联赛提高组 2003年NOIP全国联赛提高组 ', '<p>研究表明，某种传染病的传播具有两种很特殊的性质：</p><p>第一，它的传播途径是树型的，一个人X只可能被某个特定的人Y感染，只要Y不得病，或者是XY之间的传播途径被切断，则X就不会得病。</p><p>第二，这种疾病的传播有周期性，在一个疾病传播周期之内，传染病将只会感染一代患者，而不会再传播给下一代。</p><p>这些性质大大减轻了蓬莱国疾病防控的压力，并且他们已经得到了国内部分易感人群的潜在传播途径图（一棵树）。但是，麻烦还没有结束。由于蓬莱国疾控中心人手不够，同时也缺乏强大的技术，以致他们在一个疾病传播周期内，只能设法切断一条传播途径，而没有被控制的传播途径就会引起更多的易感人群被感染（也就是与当前已经被感染的人有传播途径相连，且连接途径没有被切断的人群）。当不可能有健康人被感染时，疾病就中止传播。所以，蓬莱国疾控中心要制定出一个切断传播途径的顺序，以使尽量少的人被感染。</p><p>你的程序要针对给定的树，找出合适的切断顺序。</p>', 0, 0, 0, '7 6\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7', '3', 64, 1000, '<p>每组输出只有一行，输出总共被感染的人数。<br></p>', '<p>每组输入的第一行是两个整数n（1≤n≤300）和p。接下来p行，每一行有两个整数i和j，表示节点i和j间有边相连（意即，第i人和第j人之间有传播途径相连）。其中节点1是已经被感染的患者。<br></p>', 1, NULL),
	(65, '不高兴的津津', '1', 9, '', '2019-06-11 17:34:27', 'NOIP全国联赛普及组-2004年NOIP全国联赛普及组 ', '<p>津津上初中了。妈妈认为津津应该更加用功学习，所以津津除了上学之外，还要参加妈妈为她报名的各科复习班。另外每周妈妈还会送她去学习朗诵、舞蹈和钢琴。但是津津如果一天上课超过八个小时就会不高兴，而且上得越久就会越不高兴。假设津津不会因为其它事不高兴，并且她的不高兴不会持续到第二天。请你帮忙检查一下津津下周的日程安排，看看下周她会不会不高兴；如果会的话，哪天最不高兴。<br></p>', 0, 2, 2, '5 3\n6 2\n7 2\n5 3\n5 4\n0 4\n0 6', '3', 64, 1000, '<p>每组输出包括一行，这一行只包含一个数字。如果不会不高兴则输出0，如果会则输出最不高兴的是周几（用1, 2, 3, 4, 5, 6, 7分别表示周一，周二，周三，周四，周五，周六，周日）。如果有两天或两天以上不高兴的程度相当，则输出时间最靠前的一天。<br></p>', '<p>每组输入数据包括七行，分别表示周一到周日的日程安排。每行包括两个小于10的非负整数，用空格隔开，分别表示津津在学校上课的时间和妈妈安排她上课的时间。<br></p>', 1, NULL),
	(66, 'FBI树', '3', 9, '', '2019-06-11 17:45:09', 'NOIP全国联赛普及组-2004年NOIP全国联赛普及组', '<p>我们可以把由“0”和“1”组成的字符串分为三类：全“0”串称为B串，全“1”串称为I串，既含“0”又含“1”的串则称为F串。</p><p>FBI树是一种二叉树（如下图），它的结点类型也包括F结点，B结点和I结点三种。由一个长度为2N的“01”串S可以构造出一棵FBI树T，递归的构造方法如下：</p><ol><li>T的根结点为R，其类型与串S的类型相同；</li><li>若串S的长度大于1，将串S从中间分开，分为等长的左右子串S1和S2；由左子串S1构造R的左子树T1，由右子串S2构造R的右子树T2。</li></ol><p>现在给定一个长度为2N的“01”串，请用上述构造方法构造出一棵FBI树，并输出它的后序遍历序列。</p>', 0, 0, 0, '3\n10001011', 'IBFBBBFIBFIIIFF', 64, 1000, '<p>每组输出包括一行，这一行只包含一个字符串，即FBI树的后序遍历序列。<br></p>', '<p>每组输入数据的第一行是一个整数N（0&lt;=N&lt;=10），第二行是一个长度为2N的“01”串。</p><p>数据规模：<br>对于40%的数据，N&lt;=2；<br>对于全部的数据，N&lt;=10。<br></p>', 1, NULL),
	(67, '火星人', '3', 9, '', '2019-06-11 17:46:49', 'NOIP全国联赛普及组-2004年NOIP全国联赛普及组 ', '<p>人类终于登上了火星的土地并且见到了神秘的火星人。人类和火星人都无法理解对方的语言，但是我们的科学家发明了一种用数字交流的方法。这种交流方法是这样的，首先，火星人把一个非常大的数字告诉人类科学家，科学家破解这个数字的含义后，再把一个很小的数字加到这个大数上面，把结果告诉火星人，作为人类的回答。</p><p>火星人用一种非常简单的方式来表示数字——掰手指。火星人只有一只手，但这只手上有成千上万的手指，这些手指排成一列，分别编号为1，2，3...。火星人的任意两根手指都能随意交换位置，他们就是通过这方法计数的。</p><p>一个火星人用一个人类的手演示了如何用手指计数。如果把五根手指——拇指、食指、中指、无名指和小指分别编号为1，2，3，4和5，当它们按正常顺序排列时，形成了5位数12345，当你交换无名指和小指的位置时，会形成5位数12354，当你把五个手指的顺序完全颠倒时，会形成54321，在所有能够形成的120个5位数中，12345最小，它表示1；12354第二小，它表示2；54321最大，它表示120。下表展示了只有3根手指时能够形成的6个3位数和它们代表的数字：</p><p>三进制数</p><p>123</p><p>132</p><p>213</p><p>231</p><p>312</p><p>321</p><p>代表的数字</p><p>1</p><p>2</p><p>3</p><p>4</p><p>5</p><p>6</p><p>现在你有幸成为了第一个和火星人交流的地球人。一个火星人会让你看他的手指，科学家会告诉你要加上去的很小的数。你的任务是，把火星人用手指表示的数与科学家告诉你的数相加，并根据相加的结果改变火星人手指的排列顺序。输入数据保证这个结果不会超出火星人手指能表示的范围。</p>', 0, 0, 0, '5\n3\n1 2 3 4 5', '1 2 4 5 3', 64, 1000, '<p>每组输出只有一行，这一行含有N个整数，表示改变后的火星人手指的排列顺序。每两个相邻的数中间用一个空格分开，不能有多余的空格。<br></p>', '<p>每组输入数据包括三行，第一行有一个正整数N，表示火星人手指的数目（1&lt;=N&lt;=10000）。第二行是一个正整数M，表示要加上去的小整数（1&lt;=M&lt;=100）。下一行是1到N这N个整数的一个排列，用空格隔开，表示火星人手指的排列顺序。</p><p>数据规模：</p><p>对于30%的数据，N&lt;=15；</p><p>对于60%的数据，N&lt;=50；</p><p>对于全部的数据，N&lt;=10000。<br></p>', 1, NULL),
	(68, '合并果子', '3', 9, '', '2019-06-11 17:59:35', 'NOIP全国联赛提高组 2004年NOIP全国联赛提高组 ', '<p>在一个果园里，多多已经将所有的果子打了下来，而且按果子的不同种类分成了不同的堆。多多决定把所有的果子合成一堆。</p><p>每一次合并，多多可以把两堆果子合并到一起，消耗的体力等于两堆果子的重量之和。可以看出，所有的果子经过n-1次合并之后，就只剩下一堆了。多多在合并果子时总共消耗的体力等于每次合并所耗体力之和。</p><p>因为还要花大力气把这些果子搬回家，所以多多在合并果子时要尽可能地节省体力。假定每个果子重量都为1，并且已知果子的种类数和每种果子的数目，你的任务是设计出合并的次序方案，使多多耗费的体力最少，并输出这个最小的体力耗费值。</p><p>例如有3种果子，数目依次为1，2，9。可以先将1、2堆合并，新堆数目为3，耗费体力为3。接着，将新堆与原先的第三堆合并，又得到新的堆，数目为12，耗费体力为12。所以多多总共耗费体力=3+12=15。可以证明15为最小的体力耗费值。</p>', 0, 0, 0, '3\n1 2 9', '15', 64, 1000, '<p>每组输出包括一行，这一行只包含一个整数，也就是最小的体力耗费值。输入数据保证这个值小于231。<br></p>', '<p>每组输入数据包括两行，第一行是一个整数n（1&lt;＝n&lt;=10000），表示果子的种类数。第二行包含n个整数，用空格分隔，第i个整数ai（1&lt;＝ai&lt;=20000）是第i种果子的数目。</p><p>数据规模：</p><p>对于30％的数据，保证有n&lt;=1000；</p><p>对于50％的数据，保证有n&lt;=5000；</p><p>对于全部的数据，保证有n&lt;=10000。</p>', 1, NULL),
	(69, '校门外的树', '1', 9, '', '2019-06-11 18:27:14', 'NOIP全国联赛普及组-2005年NOIP全国联赛普及组 ', '<p>某校大门外长度为L的马路上有一排树，每两棵相邻的树之间的间隔都是1米。我们可以把马路看成一个数轴，马路的一端在数轴0的位置，另一端在L的位置；数轴上的每个整数点，即0，1，2，...，L，都种有一棵树。</p><p>由于马路上有一些区域要用来建地铁。这些区域用它们在数轴上的起始点和终止点表示。已知任一区域的起始点和终止点的坐标都是整数，区域之间可能有重合的部分。现在要把这些区域中的树（包括区域端点处的两棵树）移走。你的任务是计算将这些树都移走后，马路上还有多少棵树。</p>', 0, 0, 0, '500 3\n150 300\n100 200\n470 471', '298', 64, 1000, '<p>每组输出包括一行，这一行只包含一个整数，表示马路上剩余的树的数目。<br></p>', '<p>每组输入数据的第一行有两个整数L（1&lt;=L&lt;=10000）和M（1&lt;=M&lt;=100），L代表马路的长度，M代表区域的数目，L和M之间用一个空格隔开。接下来的M行每行包含两个不同的整数，用一个空格隔开，表示一个区域的起始点和终止点的坐标。<br></p><p>数据规模：</p><p>对于20%的数据，区域之间没有重合的部分；</p><p>对于其它的数据，区域之间有重合的情况。</p>', 1, NULL),
	(70, '合唱队形', '3', 9, '', '2019-06-11 18:28:36', 'NOIP全国联赛提高组 2004年NOIP全国联赛提高组 ', '<p>N位同学站成一排，音乐老师要请其中的（N-K）位同学出列，使得剩下的K位同学排成合唱队形。</p><p>合唱队形是指这样的一种队形：设K位同学从左到右依次编号为1，2...，K，他们的身高分别为T1，T2，...，TK， &nbsp;则他们的身高满足T1&lt;...&lt;Ti&gt;Ti+1&gt;...&gt;TK（1&lt;=i&lt;=K）。</p><p>你的任务是，已知所有N位同学的身高，计算最少需要几位同学出列，可以使得剩下的同学排成合唱队形。</p>', 0, 0, 0, '8\n186 186 150 200 160 130 197 220', '4', 64, 1000, '<p>每组输出包括一行，这一行只包含一个整数，就是最少需要几位同学出列。<br></p>', '<p>每组输入数据的第一行是一个整数N（2&lt;=N&lt;=100），表示同学的总数。第一行有n个整数，用空格分隔，第i个整数Ti（130&lt;=Ti&lt;=230）是第i位同学的身高（厘米）。</p><p>数据规模：</p><p>对于50％的数据，保证有n&lt;=20；<br>对于全部的数据，保证有n&lt;=100。</p>', 1, NULL),
	(71, '虫食算', '3', 9, '', '2019-06-11 18:31:08', 'NOIP全国联赛提高组 2004年NOIP全国联赛提高组 ', '<p>所谓虫食算，就是原先的算式中有一部分被虫子啃掉了，需要我们根据剩下的数字来判定被啃掉的字母。来看一个简单的例子：<br></p><p><img alt="TIM截图20190611182941.png" src="http://localhost:8088/api-oj/image?imageName=1560248990947IjSFTIM截图20190611182941.png" width="115" height="61"><br></p><p>现在，我们对问题做两个限制：</p><p>首先，我们只考虑加法的虫食算。这里的加法是N进制加法，算式中三个数都有N位，允许有前导的0。</p><p>其次，虫子把所有的数都啃光了，我们只知道哪些数字是相同的，我们将相同的数字用相同的字母表示，不同的数字用不同的字母表示。如果这个算式是N进制的，我们就取英文字母表午的前N个大写字母来表示这个算式中的0到N-1这N个不同的数字：但是这N个字母并不一定顺序地代表0到N-1。输入数据保证N个字母分别至少出现一次。</p><p><img alt="TIM截图20190611183001.png" src="http://localhost:8088/api-oj/image?imageName=15602490103453rbtTIM截图20190611183001.png" width="84" height="68"><br></p><p>上面的算式是一个4进制的算式。很显然，我们只要让ABCD分别代表0123，便可以让这个式子成立了。你的任务是，对于给定的N进制加法算式，求出N个不同的字母分别代表的数字，使得该加法算式成立。输入数据保证有且仅有一组解。<br></p>', 0, 0, 0, '5\nABCED\nBDACE\nEBBAA', '1 0 3 4 2', 64, 1000, '<p>每组输出包含一行。在这一行中，应当包含唯一的那组解。解是这样表示的：输出N个数字，分别表示A，B，C...所代表的数字，相邻的两个数字用一个空格隔开，不能有多余的空格。<br></p>', '<p>每组输入数据包含4行。第一行是一个正整数N（N&lt;=26），后面的3行每行有一个由大写字母组成的字符串，分别代表两个加数以及和。这3个字符串左右两端都没有空格，从高位到低位，并且恰好有N位。</p><p>数据规模：</p><p>对于30％的数据，保证有N&lt;＝10；</p><p>对于50％的数据，保证有N&lt;＝15；</p><p>对于全部的数据，保证有N&lt;＝26。</p>', 1, NULL),
	(72, '采药', '1', 9, '', '2019-06-11 18:37:56', 'NOIP全国联赛普及组-2005年NOIP全国联赛普及组 ', '<p>辰辰是个天资聪颖的孩子，他的梦想是成为世界上最伟大的医师。为此，他想拜附近最有威望的医师为师。医师为了判断他的资质，给他出了一个难题。医师把他带到一个到处都是草药的山洞里对他说：“孩子，这个山洞里有一些不同的草药，采每一株都需要一些时间，每一株也有它自身的价值。我会给你一段时间，在这段时间里，你可以采到一些草药。如果你是一个聪明的孩子，你应该可以让采到的草药的总价值最大。”</p><p>如果你是辰辰，你能完成这个任务吗？</p>', 0, 0, 0, '70 3\n71 100\n69 1\n1 2', '3', 64, 1000, '<p>每组输出包括一行，这一行只包含一个整数，表示在规定的时间内，可以采到的草药的最大总价值。<br></p>', '<p>每组输入数据的第一行有两个整数T（1&lt;=T&lt;=1000）和M（1&lt;=M&lt;=100），用一个空格隔开，T代表总共能够用来采药的时间，M代表山洞里的草药的数目。接下来的M行每行包括两个在1到100之间（包括1和100）的整数，分别表示采摘某株草药的时间和这株草药的价值。</p><p>数据规模：</p><p>对于30%的数据，M&lt;=10；</p><p>对于全部的数据，M&lt;=100。</p>', 1, NULL),
	(73, '谁拿了最多奖学金', '3', 9, '', '2019-06-11 18:42:45', 'NOIP全国联赛提高组 2005年NOIP全国联赛提高组 ', '<p>某校的惯例是在每学期的期末考试之后发放奖学金。发放的奖学金共有五种，获取的条件各自不同：</p><ol><li>院士奖学金，每人8000元，期末平均成绩高于80分（&gt;80），并且在本学期内发表1篇或1篇以上论文的学生均可获得；</li><li>五四奖学金，每人4000元，期末平均成绩高于85分（&gt;85），并且班级评议成绩高于80分（&gt;80）的学生均可获得；</li><li>成绩优秀奖，每人2000元，期末平均成绩高于90分（&gt;90）的学生均可获得；</li><li>西部奖学金，每人1000元，期末平均成绩高于85分（&gt;85）的西部省份学生均可获得；</li><li>班级贡献奖，每人850元，班级评议成绩高于80分（&gt;80）的学生干部均可获得；</li></ol><p>只要符合条件就可以得奖，每项奖学金的获奖人数没有限制，每名学生也可以同时获得多项奖学金。例如姚林的期末平均成绩是87分，班级评议成绩82分，同时他还是一位学生干部，那么他可以同时获得五四奖学金和班级贡献奖，奖金总数是4850元。</p><p>现在给出若干学生的相关数据，请计算哪些同学获得的奖金总数最高（假设总有同学能满足获得奖学金的条件）。</p>', 0, 0, 0, '4\nYaoLin 87 82 Y N 0\nChenRuiyi 88 78 N Y 1\nLiXin 92 88 N N 0\nZhangQin 83 87 Y N 1', 'ChenRuiyi\n9000\n28700', 64, 1000, '<p>每组输出包括三行，第一行是获得最多奖金的学生的姓名，第二行是这名学生获得的奖金总数。如果有两位或两位以上的学生获得的奖金最多，输出他们之中在输入文件中出现最早的学生的姓名。第三行是这N个学生获得的奖学金的总数。<br></p>', '<p>每组输入的第一行是一个整数N（1&lt;=N&lt;=100），表示学生的总数。接下来的N行每行是一位学生的数据，从左向右依次是姓名，期末平均成绩，班级评议成绩，是否是学生干部，是否是西部省份学生，以及发表的论文数。姓名是由大小写英文字母组成的长度不超过20的字符串（不含空格）；期末平均成绩和班级评议成绩都是0到100之间的整数（包括0和100）；是否是学生干部和是否是西部省份学生分别用一个字符表示，Y表示是，N表示不是；发表的论文数是0到10的整数（包括0和10）。每两个相邻数据项之间用一个空格分隔。<br></p>', 1, NULL),
	(74, '过河', '3', 9, '', '2019-06-11 18:45:53', 'NOIP全国联赛提高组 2005年NOIP全国联赛提高组 ', '<p>在河上有一座独木桥，一只青蛙想沿着独木桥从河的一侧跳到另一侧。在桥上有一些石子，青蛙很讨厌踩在这些石子上。由于桥的长度和青蛙一次跳过的距离都是正整数，我们可以把独木桥上青蛙可能到达的点看成数轴上的一串整点：0，1，...，L（其中L是桥的长度）。坐标为0的点表示桥的起点，坐标为L的点表示桥的终点。青蛙从桥的起点开始，不停的向终点方向跳跃。一次跳跃的距离是S到T之间的任意正整数（包括S,T）。当青蛙跳到或跳过坐标为L的点时，就算青蛙已经跳出了独木桥。</p><p>题目给出独木桥的长度L，青蛙跳跃的距离范围S、T，桥上石子的位置。你的任务是确定青蛙要想过河，最少需要踩到的石子数。</p>', 0, 0, 0, '10\n2 3 5\n2 3 5 6 7', '2', 64, 1000, '<p>每组输出只包括一个整数，表示青蛙过河最少需要踩到的石子数。<br></p>', '<p>每组输入的第一行有一个正整数L（1&lt;=L&lt;=109），表示独木桥的长度。第二行有三个正整数S，T，M，分别表示青蛙一次跳跃的最小距离，最大距离，及桥上石子的个数，其中1&lt;=S&lt;=T&lt;=10，1&lt;=M&lt;=100。第三行有M个不同的正整数分别表示这M个石子在数轴上的位置（数据保证桥的起点和终点处没有石子）。所有相邻的整数之间用一个空格隔开。<br></p><p>数据规模：</p><p>对于30%的数据，L&lt;=10000；</p><p>对于全部的数据，L&lt;=109。</p>', 1, NULL),
	(75, '篝火晚会', '3', 9, '', '2019-06-11 18:55:21', 'NOIP全国联赛提高组 2005年NOIP全国联赛提高组 ', '<p>佳佳刚进高中，在军训的时候，由于佳佳吃苦耐劳，很快得到了教官的赏识，成为了“小教官”。在军训结束的那天晚上，佳佳被命令组织同学们进行篝火晚会。一共有n个同学，编号从1到n。一开始，同学们按照1，2，...，n的顺序坐成一圈，而实际上每个人都有两个最希望相邻的同学。如何下命令调整同学的次序，形成新的一个圈，使之符合同学们的意愿，成为摆在佳佳面前的一大难题。</p><p>佳佳可向同学们下达命令，每一个命令的形式如下：</p><p>(b1, b2,..., bm -1, bm)</p><p>这里m的值是由佳佳决定的，每次命令m的值都可以不同。这个命令的作用是移动编号是b1，b2，...，bm –1，bm的这m个同学的位置。要求b1换到b2的位置上，b2换到b3的位置上，...，要求bm换到b1的位置上。</p><p>执行每个命令都需要一些代价。我们假定如果一个命令要移动m个人的位置，那么这个命令的代价就是m。我们需要佳佳用最少的总代价实现同学们的意愿，你能帮助佳佳吗？</p>', 0, 0, 0, '4\n3 4\n4 3\n1 2\n1 2', '2', 64, 1000, '<p>每组输出包括一行，这一行只包含一个整数，为最小的总代价。如果无论怎么调整都不能符合每个同学的愿望，则输出-1。<br></p>', '<p>每组输入的第一行是一个整数n（3&lt;=n&lt;=50000），表示一共有n个同学。其后n行每行包括两个不同的正整数，以一个空格隔开，分别表示编号是1的同学最希望相邻的两个同学的编号，编号是2的同学最希望相邻的两个同学的编号，...，编号是n的同学最希望相邻的两个同学的编号。<br></p><p>数据规模：</p><p>对于30%的数据，n&lt;=1000；</p><p>对于全部的数据，n&lt;=50000。</p>', 1, NULL);
/*!40000 ALTER TABLE `problems` ENABLE KEYS */;

-- 导出  表 online_judge.problem_tag 结构
CREATE TABLE IF NOT EXISTS `problem_tag` (
  `problem_id` int(11) unsigned NOT NULL COMMENT '题目号',
  `tag_id` int(11) unsigned NOT NULL COMMENT '标签号',
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`id`) USING BTREE,
  KEY `FK_PID_PTAG` (`problem_id`),
  KEY `FK_TID_PTAG` (`tag_id`),
  CONSTRAINT `FK_PID_PTAG` FOREIGN KEY (`problem_id`) REFERENCES `problems` (`problem_id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_TID_PTAG` FOREIGN KEY (`tag_id`) REFERENCES `tag` (`tag_id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=14 DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

-- 正在导出表  online_judge.problem_tag 的数据：~10 rows (大约)
/*!40000 ALTER TABLE `problem_tag` DISABLE KEYS */;
INSERT INTO `problem_tag` (`problem_id`, `tag_id`, `id`) VALUES
	(17, 5, 3),
	(24, 6, 4),
	(25, 7, 5),
	(27, 2, 7),
	(27, 1, 8),
	(11, 10, 9),
	(16, 10, 10),
	(17, 10, 11),
	(24, 1, 12),
	(38, 10, 13);
/*!40000 ALTER TABLE `problem_tag` ENABLE KEYS */;

-- 导出  表 online_judge.solution 结构
CREATE TABLE IF NOT EXISTS `solution` (
  `solution_id` varchar(16) COLLATE utf8_bin NOT NULL COMMENT '运行id',
  `problem_id` int(11) unsigned NOT NULL COMMENT '问题id',
  `user_id` int(11) unsigned NOT NULL COMMENT '用户id',
  `time` int(11) unsigned DEFAULT NULL COMMENT '用时（ms）',
  `memory` int(11) unsigned DEFAULT NULL COMMENT '所用空间',
  `create_at` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '加入时间',
  `result` smallint(6) unsigned NOT NULL DEFAULT '0' COMMENT '结果(4:AC 0:待评测)',
  `language` tinyint(4) unsigned NOT NULL COMMENT '语言(0:java/1:c/2:c++/3:python)',
  `ip` char(255) COLLATE utf8_bin NOT NULL COMMENT '用户ip',
  `contest_id` int(11) unsigned DEFAULT NULL COMMENT '所属于竞赛组',
  `valid` tinyint(4) unsigned DEFAULT '1' COMMENT '是否有效',
  `num` tinyint(4) unsigned DEFAULT '0' COMMENT '题目在竞赛中属于顺序号',
  `code_lenght` int(11) unsigned NOT NULL COMMENT '代码长度',
  `judgetime` datetime DEFAULT NULL COMMENT '判题时间',
  `point` int(11) DEFAULT NULL COMMENT 'AC则为0,错误一题即减一',
  PRIMARY KEY (`solution_id`),
  KEY `FK_solution_problems` (`problem_id`),
  KEY `FK_solution_users` (`user_id`),
  KEY `FK_solution_contest` (`contest_id`),
  CONSTRAINT `FK_solution_contest` FOREIGN KEY (`contest_id`) REFERENCES `contest` (`contest_id`),
  CONSTRAINT `FK_solution_problems` FOREIGN KEY (`problem_id`) REFERENCES `problems` (`problem_id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_solution_users` FOREIGN KEY (`user_id`) REFERENCES `users` (`user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='程序运行结果记录';

-- 正在导出表  online_judge.solution 的数据：~18 rows (大约)
/*!40000 ALTER TABLE `solution` DISABLE KEYS */;
INSERT INTO `solution` (`solution_id`, `problem_id`, `user_id`, `time`, `memory`, `create_at`, `result`, `language`, `ip`, `contest_id`, `valid`, `num`, `code_lenght`, `judgetime`, `point`) VALUES
	('0476b157d3dc', 42, 10, 0, 0, '2019-06-12 02:44:01', 6, 2, '127.0.0.1', NULL, 1, 0, 1704, NULL, NULL),
	('16c9d1d9a414', 42, 9, 0, 0, '2019-06-12 02:56:36', 11, 2, '127.0.0.1', NULL, 1, 0, 113, NULL, NULL),
	('2911574b4b77', 63, 12, 36, 0, '2019-06-12 03:44:02', 4, 2, '127.0.0.1', NULL, 1, 0, 632, NULL, NULL),
	('2bf63213d08b', 46, 12, 0, 0, '2019-06-12 07:56:38', 11, 2, '127.0.0.1', NULL, 1, 0, 13, NULL, NULL),
	('396e790700af', 42, 10, 0, 0, '2019-06-12 01:46:14', 11, 2, '127.0.0.1', NULL, 1, 0, 201, NULL, NULL),
	('45e5841ba556', 42, 9, 0, 0, '2019-06-12 01:40:21', 10, 2, '127.0.0.1', NULL, 1, 0, 670, NULL, NULL),
	('4e45063bd681', 42, 9, 0, 0, '2019-06-12 01:43:44', 6, 2, '127.0.0.1', NULL, 1, 0, 89, NULL, NULL),
	('4ebfaad30831', 61, 10, 0, 0, '2019-06-12 02:26:25', 7, 2, '127.0.0.1', NULL, 1, 0, 200, NULL, NULL),
	('532a5937c094', 58, 12, 7, 0, '2019-06-12 03:43:36', 4, 2, '127.0.0.1', NULL, 1, 0, 223, NULL, NULL),
	('5eeba4f893fc', 47, 9, 0, 0, '2019-06-12 01:05:41', 6, 2, '127.0.0.1', NULL, 1, 0, 515, NULL, NULL),
	('5fc929ae7dee', 47, 9, 0, 0, '2019-06-12 02:57:14', 10, 2, '127.0.0.1', NULL, 1, 0, 114, NULL, NULL),
	('7246c0ac0439', 46, 9, 0, 0, '2019-06-12 02:57:50', 6, 2, '127.0.0.1', NULL, 1, 0, 109, NULL, NULL),
	('7d2c14cc170a', 47, 12, 0, 0, '2019-06-12 03:45:42', 10, 2, '127.0.0.1', NULL, 1, 0, 514, NULL, NULL),
	('82eb4123fd14', 46, 9, 0, 0, '2019-06-12 01:11:09', 6, 2, '127.0.0.1', NULL, 1, 0, 862, NULL, NULL),
	('93f3d390c943', 47, 12, 0, 0, '2019-06-12 03:44:58', 6, 2, '127.0.0.1', NULL, 1, 0, 918, NULL, NULL),
	('9b5ab8094a7a', 42, 9, 5, 0, '2019-06-12 01:04:25', 4, 2, '127.0.0.1', NULL, 1, 0, 547, NULL, NULL),
	('adf90ab90361', 43, 51, 0, 0, '2019-06-12 03:47:14', 4, 2, '127.0.0.1', NULL, 1, 0, 1081, NULL, NULL),
	('c390795a7af1', 42, 10, 0, 0, '2019-06-12 02:23:46', 7, 2, '127.0.0.1', NULL, 1, 0, 202, NULL, NULL),
	('d2a4d67e5498', 65, 9, 10, 0, '2019-06-12 01:12:49', 4, 2, '127.0.0.1', NULL, 1, 0, 357, NULL, NULL),
	('dd50ca5cc422', 61, 9, 5, 0, '2019-06-12 01:07:24', 4, 2, '127.0.0.1', NULL, 1, 0, 391, NULL, NULL);
/*!40000 ALTER TABLE `solution` ENABLE KEYS */;

-- 导出  表 online_judge.source_code 结构
CREATE TABLE IF NOT EXISTS `source_code` (
  `solution_id` varchar(16) COLLATE utf8_bin NOT NULL COMMENT '运行id',
  `source` text COLLATE utf8_bin NOT NULL COMMENT '源代码',
  PRIMARY KEY (`solution_id`),
  CONSTRAINT `FK_source_code_solution` FOREIGN KEY (`solution_id`) REFERENCES `solution` (`solution_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

-- 正在导出表  online_judge.source_code 的数据：~17 rows (大约)
/*!40000 ALTER TABLE `source_code` DISABLE KEYS */;
INSERT INTO `source_code` (`solution_id`, `source`) VALUES
	('0476b157d3dc', '#include <iostream>  \n\n#include <iomanip>  \n\n#include <string>  \n\nusing namespace std;  \n\n  \n\nint fama(int N, int weight[], int num[])  \n\n{  \n\n    int AllWeight = 0, i, j;  \n\n    for (i = 0; i < N; i++)  \n\n        AllWeight = AllWeight + weight[i] * num[i];  \n\n    int flag[100000] = {0};  \n\n  \n\n    /*先计算第0种砝码能够得到的称重数量，并且计算第0种砝码最大的重量*/  \n\n    int TempWeight = 0;  \n\n    for (i = 0; i <=num[0]; i++)  \n\n    {  \n\n        flag[weight[0] * i] = 1;  \n\n    }  \n\n    TempWeight = weight[0]*num[0];  \n\n    //从此以后TempWeight将用来表示前一种砝码的最大重量  \n\n      \n\n    i = 1;//从第1种砝码开始做  \n\n    int CurrentWeight;  \n\n    int NewWeight;  \n\n    while (i < N)  \n\n    {  \n\n        for (j = 1; j <=num[i]; j++)//第i种砝码的个数最多为num[i]  \n\n        {  \n\n            for (CurrentWeight = 0; CurrentWeight <=TempWeight; CurrentWeight++)//CurrentWeight采用试探的方式逐次加1它的大小不能大于前一种重量的最大值  \n\n            {  \n\n                NewWeight = CurrentWeight + j*weight[i];  \n\n                if (NewWeight>AllWeight) break;  \n\n                if (flag[CurrentWeight==1]&&flag[NewWeight]==0)//如果当前的这个重量可以由前一种砝码和当前砝码组合而成  \n\n                {  \n\n                    flag[NewWeight] = 1;  \n\n                }  \n\n            }  \n\n        }  \n\n        TempWeight = TempWeight + num[i] * weight[i];//更新上一个砝码的最大重量  \n\n        i++;  \n\n    }  \n\n  \n\n    /*统计总数量*/  \n\n    int count = 0;  \n\n    for (i = 0; i < 1000; i++) { if (flag[i] == 1) count++; }  \n\n    return count;  \n\n}  \n\n  \n\nint main()  \n\n{  \n\n    int n;  \n\n    cin >> n;  \n\n    int *w = new int[n];  \n\n    int *num = new int[n];  \n\n    for (int i = 0; i < n; i++)  \n\n        cin >> w[i];  \n\n    for (int i = 0; i < n; i++)  \n\n        cin >> num[i];  \n\n  \n\n    cout <<fama(n,w,num)<<endl;  \n\n    return 0;  \n\n}  '),
	('16c9d1d9a414', '#include <iosteam>\nusing namespace std;\nint main(){\n  long b[300000][6];\n  long a = 10000000000000;\n  return 0;\n}'),
	('2911574b4b77', '#include<cmath>\n#include<iostream>\nusing namespace std;\nmain() {\n   char c;\n   int a[10000][2],b=0,d=0,i,l=0,p=0,w=0;\n   while(1) {\n      cin>>c;\n      if(c==\'E\')\n         break;\n      if(c==\'W\') {\n         w++;\n         b++;\n      } else if(c==\'L\') {\n         l++;\n         d++;\n      }\n      if((w>=11||l>=11)&&abs(w-l)>=2) {\n         cout<<w<<\':\'<<l<<endl;\n         w=0;\n         l=0;\n      }\n      if((b>=21||d>=21)&&abs(b-d)>=2) {\n         a[++p][0]=b;\n         a[p][1]=d;\n         b=0;\n         d=0;\n      }\n   }\n   cout<<w<<\':\'<<l<<"\\n\\n";\n   for(i=1; i<=p; i++)\n      cout<<a[i][0]<<\':\'<<a[i][1]<<endl;\n   cout<<b<<\':\'<<d;\n}'),
	('2bf63213d08b', '#DSFADAFDAFSD'),
	('396e790700af', '#include <iosteam>\nusing namespace std;\nint main(){\n  long b = 0;\n  long a = 10000000000000;\n  for(int i = 0;i<a;i++){\n  	if(i%2==0){\n      b++;\n    }\n    else\n    {\n      	b++;\n    }\n  }\n  return 0;\n}'),
	('45e5841ba556', '#include <iostream>\nint main()\n{\n    int T,n,a,b,c;\n    std::cin>>T>>n>>a>>b>>c;\n    int *d;\n    d=new int[n];\n    int e[3];\n    e[0]=a;\n    e[1]=b;\n    e[2]=c;\n    for (int i = 0; i < n; ++i)\n    {\n        d[i]=0;\n    }\n    for (int i = 0; i < 3; ++i)\n    {\n        for (int j = 1; j <= n; ++j)\n        {\n            if (j%e[i]==0&&d[j-1]==0)\n            {\n                d[j-1]=1;\n            }\n            else if (j%e[i]==0&&d[j-1]==1)\n            {\n                d[j-1]=0;           \n            }\n        }\n    }\n    int f=0;\n    for (int i = 0; i < n; ++i)\n    {\n        if (d[i]==1)\n        {\n            f++;\n        }\n    }\n    std::cout<<f;\n    return 0;\n}'),
	('4e45063bd681', '#include <iostream>\nusing namespace std;\nint main(){\n   int  a[6000000][60];\n	return 0;\n}'),
	('4ebfaad30831', '#include <iostream>\nusing namespace std;\nint main(){\n  long b = 0;\n  long a = 100000000000;\n  for(int i = 0;i<a;i++){\n  	if(i%2==0){\n      b++;\n    }\n    else\n    {\n      	b++;\n    }\n  }\n  return 0;\n}'),
	('532a5937c094', '#include<iostream>\nusing namespace std;\nint main()\n{   int k;\n    cin>>k;\n    double Sn=0;\n    int i=0;\n    while(Sn<=k)\n        {i++;\n		Sn+=1.0/i;                    //注意double型中1.0和1的区别\n	}\n	cout<<i<<endl;\n    return 0;\n}\n'),
	('5eeba4f893fc', '#include <stdio.h>\n#include <algorithm>\nusing namespace std;\nint dp[2000001];\nint main()\n{\n    int a[51];\n    int i,j,k,n,m;\n    while(scanf("%d%d",&k,&n)!=EOF)\n    {\n        for(i=0;i<n;i++)\n            scanf("%d",&a[i]);\n        sort(a,a+n);\n        dp[0]=0;\n        i=0;\n        while(dp[i]<=k)\n        {\n            i++;dp[i]=999999;\n            for(j=0;j<n&&a[j]<=i;j++)\n                if(dp[i-a[j]]+1<dp[i])\n                    dp[i]=dp[i-a[j]]+1;\n        }\n        printf("%d\\n",i-1);\n    }\n    return 0;\n}\n'),
	('5fc929ae7dee', '#include <iostream>\nusing namespace std;\nint main(){\n  long b[300000][6];\n  long a = 10000000000000;\n  return 0;\n}'),
	('7246c0ac0439', '#include <iostream>\nusing namespace std;\nint main(){\n  long b[30000][6];\n  long a = 1000000000;\n  return 0;\n}'),
	('7d2c14cc170a', '#include <stdio.h>\n#include <algorithm>\nusing namespace std;\nint dp[2000001];\nint main()\n{\n    int a[51];\n    int i,j,k,n,m;\n    while(scanf("%d%d",&k,&n)!=EOF)\n    {\n        for(i=0;i<n;i++)\n            scanf("%d",&a[i]);\n        sort(a,a+n);\n        dp[0]=0;\n        i=0;\n        while(dp[i]<=k)\n        {\n            i++;dp[i]=999999;\n            for(j=0;j<n&&a[j]<=i;j++)\n                if(dp[i-a[j]]+1<dp[i])\n                    dp[i]=dp[i-a[j]]+1;\n        }\n        printf("%d\\n",i-1);\n    }\n    return 0;\n}'),
	('82eb4123fd14', '/*\nHDU 1257\n为了使得使用的拦截系统最少，自然是要考虑使用与当前高度最接近的系统拦截（应该是贪心算法)\n*/\n#include<stdio.h>\n#define INF 0x7ffffff\n#define MAXN 10000\nint dp[MAXN];//dp[i]代表第i个导弹当前拦截的高度\nint main()\n{\n    int n,x,i,res,flag;\n    int minh;\n    while(scanf("%d",&n)!=EOF)\n    {\n        res=0;\n        while(n--)\n        {\n            scanf("%d",&x);\n            flag=0;\n            minh=INF;\n            int tempi;            \n            for(i=0;i<res;i++)\n            {\n                if(x<=dp[i]&&minh>dp[i]-x)\n                {\n                    minh=dp[i]-x;\n                    //dp[i]=x;\n                    tempi=i;\n                    flag=1;\n                }    \n            }\n            if(flag==0)\n            {\n                dp[res]=x;\n                res++;\n            }        \n            else dp[tempi]=x;\n        }\n        printf("%d\\n",res);    \n    }    \n    return 0;\n}'),
	('93f3d390c943', '\n#include<iostream>\n#include<cstdio>\n#include<cstring>\nusing namespace std;\nint maxn=501;\nint a[61],b[61],ans=0,p[501];\nint n,k;\nvoid search(int m)\n{\n    memset(p,0x3f,sizeof(p));\n    p[0]=0;  //递推终止 \n    int i,j;\n    for(i=1;i<=maxn;i++)\n    {\n        for(j=1;j<=m&&a[j]<=i/*算是一种剪枝*/;j++)\n        {\n            p[i]=min(p[i],p[i-a[j]]+1);  //褚佬亲自传授 \n        }\n        if(p[i]>n)  //如个数超过了指定上限N; \n        {\n            i--; //退回到上一种未超的可能 \n            break;\n        }\n    }\n    if(m==k)\n    {\n	if(i>ans)\n        {\n            ans=i;\n            for(int l=1;l<=m;l++)\n            {\n                b[l]=a[l];  //更新答案 \n            }\n        }\n        return;\n    }\n    for(int j=a[m]+1;j<=i+1;j++)\n    {\n        a[m+1]=j;//更新邮票面值 \n        search(m+1);\n    }\n}\nint main()\n{\n    cin>>n>>k;\n    a[1]=1;\n    search(1);\n    for(int i=1;i<=k;i++)\n        cout<<b[i]<<" ";\n    cout<<endl;\n    cout<<"MAX="<<ans;\n    return 0;\n}'),
	('9b5ab8094a7a', '#include<cstdio>\n#define MAXN int(1e6+10)\nint dp[MAXN];\nint w[MAXN];\nint a[] = { 0,1,2,3,5,10,20 };\nint main()\n{\n    int n = 0, k;\n    for (int i = 1; i <= 6;++i)\n    {\n        scanf("%d", &k);\n        for (int j = 1; j <= k; ++j)\n            w[++n] = a[i];\n    }\n    int v = 0;\n    for (int i = 1; i <= n; ++i)\n        v += w[i];\n    dp[0] = 1;\n    for (int i = 1; i <= n;++i)\n    for (int j = v; j >= w[i]; --j)\n        dp[j] += dp[j - w[i]];\n    int ans = 0;\n    for (int i = 1; i <= v;++i)\n    if (dp[i])++ans;\n    printf("Total=%d\\n", ans);\n}'),
	('adf90ab90361', '#include <iostream>\nusing namespace std;\n\nclass Permutation\n{\npublic:\n    void Perm(int a[],int k,int n);               //将数字进行全排列\n    void PermOfThree(int a[]);                    //将数字分为3组，并为1:2:3的比例\nprivate:\n    int a[];\n};\n\n\nvoid Permutation::Perm(int a[],int k, int n)\n{\n    if(k<n-1)\n    {\n        for(int i=k;i<n;i++){                   //产生{a[k],···,a[n-1]}各种排列\n            int t=a[k];\n            a[k]=a[i];\n            a[i]=t;\n            Perm(a,k+1,n);                     //产生{a[k+1],···,a[n-1]}各种排列\n            t=a[k];\n            a[k]=a[i];\n            a[i]=t;\n        }\n\n    }\n    else{\n        PermOfThree(a);\n    }\n}\n\nvoid Permutation::PermOfThree(int a[])\n       {\n           double one = a[0]*100 + a[1]*10 + a[2];\n           double two = a[3]*100 + a[4]*10 + a[5];\n           double three = a[6]*100 + a[7]*10 + a[8];\n           if( (two/one) == 2 && (three/one) == 3 )\n           {\n              cout<<one<<" "<<two<<" "<<three<<endl;\n           }\n       }\n\n\n\nint main()\n{\n    int a[]={1,2,3,4,5,6,7,8,9};\n    Permutation p;\n    p.Perm(a,0,9);\n    return 0;\n}\n'),
	('c390795a7af1', '#include <iostream>\nusing namespace std;\nint main(){\n  long b = 0;\n  long a = 10000000000000;\n  for(int i = 0;i<a;i++){\n  	if(i%2==0){\n      b++;\n    }\n    else\n    {\n      	b++;\n    }\n  }\n  return 0;\n}'),
	('d2a4d67e5498', '#include<iostream>\nusing namespace std;\n \nint main()\n{\n	int m, n, flag = 0, sum=0, sum1 = 0, time = 0, time1, num = 7;\n	while (num--&&cin >> m >> n)\n	{\n		time++;\n		if (m + n > 8)\n		{\n			flag = 1;\n			sum = m + n;\n		}\n		if (sum > sum1)\n		{\n			sum1 = sum;\n			time1 = time;\n		}\n	}\n	if (flag == 0)\n		cout << \'0\' << endl;\n	else cout << time1 << endl;\n	return 0;\n}'),
	('dd50ca5cc422', '#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nint n,card[105],ave,step;\nint main()\n{\n    scanf("%d",&n);\n    for(int i=1;i<=n;++i)\n        scanf("%d",&card[i]),ave+=card[i];\n    ave=ave/n;\n    for(int i=1;i<=n;++i)\n    {\n        if(ave==card[i]) continue;\n        card[i+1]+=card[i]-ave,step++;\n    }\n    printf("%d\\n",step);\n    return 0;\n}\n');
/*!40000 ALTER TABLE `source_code` ENABLE KEYS */;

-- 导出  表 online_judge.tag 结构
CREATE TABLE IF NOT EXISTS `tag` (
  `tag_id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT '标签号',
  `tagname` varchar(255) COLLATE utf8_bin NOT NULL COMMENT '标签名',
  PRIMARY KEY (`tag_id`,`tagname`) USING BTREE,
  UNIQUE KEY `tagname` (`tagname`) USING HASH,
  KEY `tag_id` (`tag_id`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

-- 正在导出表  online_judge.tag 的数据：~7 rows (大约)
/*!40000 ALTER TABLE `tag` DISABLE KEYS */;
INSERT INTO `tag` (`tag_id`, `tagname`) VALUES
	(1, '简单'),
	(2, '入门'),
	(5, 'NOIP'),
	(6, '最大和'),
	(7, 'BJWC'),
	(9, '中等'),
	(10, '数字问题');
/*!40000 ALTER TABLE `tag` ENABLE KEYS */;

-- 导出  表 online_judge.users 结构
CREATE TABLE IF NOT EXISTS `users` (
  `user_id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT '用户Id',
  `username` varchar(16) COLLATE utf8_bin NOT NULL COMMENT '用户名',
  `nickname` varchar(18) COLLATE utf8_bin DEFAULT 'coder' COMMENT '用户昵称',
  `passwd` varchar(60) COLLATE utf8_bin NOT NULL COMMENT '用户密码',
  `school` varchar(40) COLLATE utf8_bin DEFAULT NULL COMMENT '用户学校',
  `github_url` varchar(255) COLLATE utf8_bin DEFAULT NULL COMMENT 'github地址',
  `blog_url` varchar(255) COLLATE utf8_bin DEFAULT NULL COMMENT '博客地址',
  `own_words` varchar(255) COLLATE utf8_bin DEFAULT NULL COMMENT '用户签名',
  `email` varchar(100) COLLATE utf8_bin DEFAULT NULL COMMENT '用户邮箱',
  `remark` varchar(50) COLLATE utf8_bin DEFAULT NULL COMMENT '用户备注',
  `submit` int(10) unsigned DEFAULT '0' COMMENT '提交次数',
  `solved` int(10) unsigned DEFAULT '0' COMMENT '成功次数',
  `access_time` datetime(6) DEFAULT CURRENT_TIMESTAMP(6) COMMENT '用户注册时间',
  `session_id` varchar(50) COLLATE utf8_bin DEFAULT NULL COMMENT 'sessionId',
  `last_login` datetime(6) DEFAULT NULL COMMENT '用户上次登录时间',
  `disabled` bit(1) DEFAULT b'0' COMMENT '是否禁用',
  `head_img` varchar(255) COLLATE utf8_bin DEFAULT NULL COMMENT '头像路径',
  PRIMARY KEY (`user_id`),
  UNIQUE KEY `userName` (`username`) USING HASH
) ENGINE=InnoDB AUTO_INCREMENT=74 DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='用户表';

-- 正在导出表  online_judge.users 的数据：~27 rows (大约)
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
INSERT INTO `users` (`user_id`, `username`, `nickname`, `passwd`, `school`, `github_url`, `blog_url`, `own_words`, `email`, `remark`, `submit`, `solved`, `access_time`, `session_id`, `last_login`, `disabled`, `head_img`) VALUES
	(9, 'cloud', '吱吱云', '5cba13819e624f8dc0a991a7691f3f82', 'hyit', 'https://github.com/Morizunzhu', 'https://blog.csdn.net/Morizunzhu', '学无止境！', 'wu1jin2cheng3@live.cn', NULL, 12, 5, '2018-01-16 19:18:22.000000', 'A140FDBF535DA5B055CC313A49DBA6DE', '2019-06-12 02:55:21.919000', b'0', 'http://localhost:8088/api-oj/image?imageName=1560261941721rorologo.png'),
	(10, 'morizunzhu', '就当一次路过丶', '5cba13819e624f8dc0a991a7691f3f82', 'hyit', NULL, NULL, NULL, 'morizunzhu@hotmail.com', NULL, 5, 0, '2019-01-16 19:18:27.000000', '4859E9482B3F18341F7817A2B6460115', '2019-06-14 12:44:16.238000', b'0', NULL),
	(12, 'admin', 'admin', '5cba13819e624f8dc0a991a7691f3f82', 'hyit', NULL, NULL, NULL, 'wu1jin2cheng3@live.cn', NULL, 5, 2, '2015-01-16 19:18:29.000000', '521710A4C19840D2D5D595EBB56F2F34', '2019-06-29 08:18:13.592000', b'0', NULL),
	(51, 'guihujunzhu', 'coder', '5cba13819e624f8dc0a991a7691f3f82', '清华大学', NULL, NULL, NULL, '940406032@qq.com', NULL, 1, 1, '2019-05-19 16:29:09.000000', '4D08AAFEB097D24EAB8AA921F70DE03A', '2019-06-12 03:47:02.405000', b'0', NULL),
	(52, 'orange', '橙子', '5cba13819e624f8dc0a991a7691f3f82', NULL, NULL, NULL, NULL, '940406032@qq.com', NULL, 0, 0, '2019-05-19 16:31:28.317595', '0E1282131E8AA0E823E8546875430D7E', '2019-05-19 17:12:34.999000', b'0', NULL),
	(53, 'cities', 'coder', '5cba13819e624f8dc0a991a7691f3f82', NULL, NULL, NULL, NULL, '739551319@qq.com', NULL, 0, 0, '2019-05-24 08:33:24.457462', '3EADE8FA836EC5C13506E2F7C90E9B17', '2019-05-24 08:33:23.557000', b'0', NULL),
	(54, 'ameame', 'coder', '5cba13819e624f8dc0a991a7691f3f82', NULL, NULL, NULL, NULL, '940406032@qq.com', NULL, 0, 0, '2019-05-24 08:47:24.601071', '3EADE8FA836EC5C13506E2F7C90E9B17', '2019-05-24 08:47:23.731000', b'0', NULL),
	(55, 'paparazi', 'coder', '5cba13819e624f8dc0a991a7691f3f82', NULL, NULL, NULL, NULL, '94040406032@qq.com', NULL, 0, 0, '2019-05-24 08:47:56.390988', '3EADE8FA836EC5C13506E2F7C90E9B17', '2019-05-24 08:47:55.536000', b'0', NULL),
	(56, 'maybe', 'coder', '5cba13819e624f8dc0a991a7691f3f82', NULL, NULL, NULL, NULL, '94040406032@qq.com', NULL, 0, 0, '2019-05-24 08:48:22.566817', '3EADE8FA836EC5C13506E2F7C90E9B17', '2019-05-24 08:48:21.678000', b'0', NULL),
	(57, 'chalice', 'coder', '5cba13819e624f8dc0a991a7691f3f82', NULL, NULL, NULL, NULL, '94040406032@qq.com', NULL, 0, 0, '2019-05-24 08:49:12.808063', '3EADE8FA836EC5C13506E2F7C90E9B17', '2019-05-24 08:49:11.924000', b'0', NULL),
	(58, 'xnova', 'coder', '5cba13819e624f8dc0a991a7691f3f82', NULL, NULL, NULL, NULL, '94040406032@qq.com', NULL, 0, 0, '2019-05-24 08:49:34.895125', '3EADE8FA836EC5C13506E2F7C90E9B17', '2019-05-24 08:49:33.981000', b'0', NULL),
	(59, 'miracle', 'coder', '5cba13819e624f8dc0a991a7691f3f82', NULL, NULL, NULL, NULL, '94040406032@qq.com', NULL, 0, 0, '2019-05-24 08:50:08.647156', '3EADE8FA836EC5C13506E2F7C90E9B17', '2019-05-24 08:50:07.740000', b'0', NULL),
	(60, 'eleven', 'coder', '5cba13819e624f8dc0a991a7691f3f82', NULL, NULL, NULL, NULL, '94040406032@qq.com', NULL, 0, 0, '2019-05-24 08:50:40.852176', '3EADE8FA836EC5C13506E2F7C90E9B17', '2019-05-24 08:50:39.953000', b'0', NULL),
	(61, 'topson', 'coder', '5cba13819e624f8dc0a991a7691f3f82', NULL, NULL, NULL, NULL, '940406032@qq.com', NULL, 0, 0, '2019-05-24 08:51:06.659052', '3EADE8FA836EC5C13506E2F7C90E9B17', '2019-05-24 08:51:05.763000', b'0', NULL),
	(62, 'notail', 'coder', '5cba13819e624f8dc0a991a7691f3f82', NULL, NULL, NULL, NULL, '94040406032@qq.com', NULL, 0, 0, '2019-05-24 08:51:32.394249', '3EADE8FA836EC5C13506E2F7C90E9B17', '2019-05-24 08:51:31.553000', b'0', NULL),
	(63, 'theshy', 'coder', '5cba13819e624f8dc0a991a7691f3f82', NULL, NULL, NULL, NULL, '94040406032@qq.com', NULL, 0, 0, '2019-05-24 08:53:53.531298', '3EADE8FA836EC5C13506E2F7C90E9B17', '2019-05-24 08:53:52.619000', b'0', NULL),
	(64, 'rookie', 'coder', '5cba13819e624f8dc0a991a7691f3f82', NULL, NULL, NULL, NULL, '94040406032@qq.com', NULL, 0, 0, '2019-05-24 08:54:15.536691', '3EADE8FA836EC5C13506E2F7C90E9B17', '2019-05-24 08:54:14.638000', b'0', NULL),
	(65, 'jackeylove', 'coder', '5cba13819e624f8dc0a991a7691f3f82', NULL, NULL, NULL, NULL, '94040406032@qq.com', NULL, 0, 0, '2019-05-24 08:54:35.693538', '3EADE8FA836EC5C13506E2F7C90E9B17', '2019-05-24 08:54:34.826000', b'0', NULL),
	(66, 'baolan', 'coder', '5cba13819e624f8dc0a991a7691f3f82', NULL, NULL, NULL, NULL, '94040406032@qq.com', NULL, 0, 0, '2019-05-24 08:54:58.332044', '3EADE8FA836EC5C13506E2F7C90E9B17', '2019-05-24 08:54:57.439000', b'0', NULL),
	(67, 'faker', '云上魔王', '5cba13819e624f8dc0a991a7691f3f82', NULL, NULL, NULL, NULL, '94040406032@qq.com', NULL, 0, 0, '2019-05-24 08:56:55.062974', '3EADE8FA836EC5C13506E2F7C90E9B17', '2019-05-24 08:56:54.175000', b'0', NULL),
	(68, 'liuzirui', '刘子瑞', '5cba13819e624f8dc0a991a7691f3f82', NULL, NULL, NULL, NULL, 'ruizhi@qq.com', NULL, 0, 0, '2019-05-24 09:10:23.350864', 'AE28EEDA43599601C030DF2F0B21D498', '2019-05-24 10:23:55.955000', b'1', NULL),
	(69, 'white', 'coder', '5cba13819e624f8dc0a991a7691f3f82', NULL, NULL, NULL, NULL, '940406032@qq.com', NULL, 0, 0, '2019-05-24 10:29:01.137155', 'C4A7546E972B8C55093131FFFC6EEA8F', '2019-05-24 10:29:00.209000', b'0', NULL),
	(70, 'xiao8', 'coder', '5cba13819e624f8dc0a991a7691f3f82', NULL, NULL, NULL, NULL, '940406032@qq.com', NULL, 0, 0, '2019-05-24 10:29:53.578665', 'C4A7546E972B8C55093131FFFC6EEA8F', '2019-05-24 10:29:52.662000', b'0', NULL),
	(71, 'sky_td', 'sky_td', '5cba13819e624f8dc0a991a7691f3f82', NULL, NULL, NULL, NULL, '940406032@qq.com', NULL, 0, 0, '2019-05-24 10:31:42.897076', '61349754023492BC8271B6087394F3E4', '2019-05-24 10:31:42.403000', b'0', NULL),
	(72, 'wusheng2009', 'wusheng2009', '5cba13819e624f8dc0a991a7691f3f82', NULL, NULL, NULL, NULL, '940406032@qq.com', NULL, 0, 0, '2019-05-24 10:32:26.059447', '61349754023492BC8271B6087394F3E4', '2019-05-24 10:32:25.131000', b'0', NULL),
	(73, 'uzi_dog', 'uzi_dog', '5cba13819e624f8dc0a991a7691f3f82', NULL, NULL, NULL, NULL, '940406032@qq.com', NULL, 0, 0, '2019-05-24 10:33:52.657423', '61349754023492BC8271B6087394F3E4', '2019-05-24 10:33:51.720000', b'0', NULL);
/*!40000 ALTER TABLE `users` ENABLE KEYS */;

/*!40101 SET SQL_MODE=IFNULL(@OLD_SQL_MODE, '') */;
/*!40014 SET FOREIGN_KEY_CHECKS=IF(@OLD_FOREIGN_KEY_CHECKS IS NULL, 1, @OLD_FOREIGN_KEY_CHECKS) */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
